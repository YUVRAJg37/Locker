

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Tue Apr 25 20:17:10 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Version 2.40
    28                           ; Generated 17/11/2021 GMT
    29                           ; 
    30                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution. Publication is not required when
    44                           ;        this file is used in an embedded application.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F877A Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  000E                     	;# 
    78  000F                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0014                     	;# 
    84  0015                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001B                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001D                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  0081                     	;# 
    98  0085                     	;# 
    99  0086                     	;# 
   100  0087                     	;# 
   101  0088                     	;# 
   102  0089                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  018C                     	;# 
   121  018D                     	;# 
   122  0000                     	;# 
   123  0001                     	;# 
   124  0002                     	;# 
   125  0003                     	;# 
   126  0004                     	;# 
   127  0005                     	;# 
   128  0006                     	;# 
   129  0007                     	;# 
   130  0008                     	;# 
   131  0009                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000D                     	;# 
   136  000E                     	;# 
   137  000E                     	;# 
   138  000F                     	;# 
   139  0010                     	;# 
   140  0011                     	;# 
   141  0012                     	;# 
   142  0013                     	;# 
   143  0014                     	;# 
   144  0015                     	;# 
   145  0015                     	;# 
   146  0016                     	;# 
   147  0017                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001B                     	;# 
   152  001B                     	;# 
   153  001C                     	;# 
   154  001D                     	;# 
   155  001E                     	;# 
   156  001F                     	;# 
   157  0081                     	;# 
   158  0085                     	;# 
   159  0086                     	;# 
   160  0087                     	;# 
   161  0088                     	;# 
   162  0089                     	;# 
   163  008C                     	;# 
   164  008D                     	;# 
   165  008E                     	;# 
   166  0091                     	;# 
   167  0092                     	;# 
   168  0093                     	;# 
   169  0094                     	;# 
   170  0098                     	;# 
   171  0099                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  009F                     	;# 
   176  010C                     	;# 
   177  010D                     	;# 
   178  010E                     	;# 
   179  010F                     	;# 
   180  018C                     	;# 
   181  018D                     	;# 
   182                           
   183                           	psect	idataBANK0
   184  046E                     __pidataBANK0:
   185                           
   186                           ;initializer for _currentPassword
   187  046E  3430               	retlw	48
   188  046F  3430               	retlw	48
   189  0470  3430               	retlw	48
   190  0471  3430               	retlw	48
   191  0472  3400               	retlw	0
   192                           
   193                           ;initializer for _defaultPassword
   194  0473  3431               	retlw	49
   195  0474  3432               	retlw	50
   196  0475  3433               	retlw	51
   197  0476  3434               	retlw	52
   198  0477  3400               	retlw	0
   199  0008                     _PORTD	set	8
   200  0005                     _PORTA	set	5
   201  0037                     _RB7	set	55
   202  0036                     _RB6	set	54
   203  0035                     _RB5	set	53
   204  0034                     _RB4	set	52
   205  0032                     _RB2	set	50
   206  0031                     _RB1	set	49
   207  0030                     _RB0	set	48
   208  003A                     _RC2	set	58
   209  0039                     _RC1	set	57
   210  0038                     _RC0	set	56
   211  0088                     _TRISD	set	136
   212  0087                     _TRISC	set	135
   213  0086                     _TRISB	set	134
   214  0085                     _TRISA	set	133
   215                           
   216                           	psect	strings
   217  0003                     __pstrings:
   218  0003                     stringtab:
   219  0003                     __stringtab:
   220  0003                     stringcode:	
   221                           ;	String table - string pointers are 1 byte each
   222                           
   223  0003                     stringdir:
   224  0003  3000               	movlw	high stringdir
   225  0004  008A               	movwf	10
   226  0005  0804               	movf	4,w
   227  0006  0A84               	incf	4,f
   228  0007  0782               	addwf	2,f
   229  0008                     __stringbase:
   230  0008  3400               	retlw	0
   231  0009                     __end_of__stringtab:
   232  0009                     STR_3:
   233  0009  3420               	retlw	32	;' '
   234  000A  3445               	retlw	69	;'E'
   235  000B  346E               	retlw	110	;'n'
   236  000C  3474               	retlw	116	;'t'
   237  000D  3465               	retlw	101	;'e'
   238  000E  3472               	retlw	114	;'r'
   239  000F  3420               	retlw	32	;' '
   240  0010  3450               	retlw	80	;'P'
   241  0011  3461               	retlw	97	;'a'
   242  0012  3473               	retlw	115	;'s'
   243  0013  3473               	retlw	115	;'s'
   244  0014  3477               	retlw	119	;'w'
   245  0015  346F               	retlw	111	;'o'
   246  0016  3472               	retlw	114	;'r'
   247  0017  3464               	retlw	100	;'d'
   248  0018  3400               	retlw	0
   249  0019                     STR_5:
   250  0019  3420               	retlw	32	;' '
   251  001A  3420               	retlw	32	;' '
   252  001B  3420               	retlw	32	;' '
   253  001C  3454               	retlw	84	;'T'
   254  001D  3452               	retlw	82	;'R'
   255  001E  3459               	retlw	89	;'Y'
   256  001F  3420               	retlw	32	;' '
   257  0020  3441               	retlw	65	;'A'
   258  0021  3447               	retlw	71	;'G'
   259  0022  3441               	retlw	65	;'A'
   260  0023  3449               	retlw	73	;'I'
   261  0024  344E               	retlw	78	;'N'
   262  0025  3400               	retlw	0
   263  0026                     STR_1:
   264  0026  3420               	retlw	32	;' '
   265  0027  3420               	retlw	32	;' '
   266  0028  3420               	retlw	32	;' '
   267  0029  3455               	retlw	85	;'U'
   268  002A  344E               	retlw	78	;'N'
   269  002B  344C               	retlw	76	;'L'
   270  002C  344F               	retlw	79	;'O'
   271  002D  3443               	retlw	67	;'C'
   272  002E  344B               	retlw	75	;'K'
   273  002F  3445               	retlw	69	;'E'
   274  0030  3444               	retlw	68	;'D'
   275  0031  3400               	retlw	0
   276  0032                     STR_2:
   277  0032  3420               	retlw	32	;' '
   278  0033  3420               	retlw	32	;' '
   279  0034  3420               	retlw	32	;' '
   280  0035  3420               	retlw	32	;' '
   281  0036  3457               	retlw	87	;'W'
   282  0037  3465               	retlw	101	;'e'
   283  0038  346C               	retlw	108	;'l'
   284  0039  3463               	retlw	99	;'c'
   285  003A  346F               	retlw	111	;'o'
   286  003B  346D               	retlw	109	;'m'
   287  003C  3465               	retlw	101	;'e'
   288  003D  3400               	retlw	0
   289  003E                     STR_4:
   290  003E  3420               	retlw	32	;' '
   291  003F  3420               	retlw	32	;' '
   292  0040  3420               	retlw	32	;' '
   293  0041  3420               	retlw	32	;' '
   294  0042  3420               	retlw	32	;' '
   295  0043  3400               	retlw	0
   296  003E                     
   297                           	psect	cinit
   298  07EA                     start_initialization:	
   299                           ; #config settings
   300                           
   301  07EA                     __initialization:
   302                           
   303                           ; Initialize objects allocated to BANK0
   304  07EA  1383               	bcf	3,7	;select IRP bank0
   305  07EB  302A               	movlw	low (__pdataBANK0+10)
   306  07EC  00FD               	movwf	btemp+-1
   307  07ED  3004               	movlw	high __pidataBANK0
   308  07EE  00FE               	movwf	btemp
   309  07EF  306E               	movlw	low __pidataBANK0
   310  07F0  00FF               	movwf	btemp+1
   311  07F1  3020               	movlw	low __pdataBANK0
   312  07F2  0084               	movwf	4
   313  07F3  120A  118A  247C  120A  118A  	fcall	init_ram0
   314                           
   315                           ; Clear objects allocated to BANK0
   316  07F8  01AA               	clrf	__pbssBANK0& (0+127)
   317  07F9  01AB               	clrf	(__pbssBANK0+1)& (0+127)
   318  07FA  01AC               	clrf	(__pbssBANK0+2)& (0+127)
   319  07FB  01AD               	clrf	(__pbssBANK0+3)& (0+127)
   320  07FC                     end_of_initialization:	
   321                           ;End of C runtime variable initialization code
   322                           
   323  07FC                     __end_of__initialization:
   324  07FC  0183               	clrf	3
   325  07FD  120A  118A  2E02   	ljmp	_main	;jump to C main() function
   326                           
   327                           	psect	bssBANK0
   328  002A                     __pbssBANK0:
   329  002A                     _passwordMaxLength:
   330  002A                     	ds	2
   331  002C                     _passwordCurrentLength:
   332  002C                     	ds	2
   333                           
   334                           	psect	dataBANK0
   335  0020                     __pdataBANK0:
   336  0020                     _currentPassword:
   337  0020                     	ds	5
   338  0025                     _defaultPassword:
   339  0025                     	ds	5
   340                           
   341                           	psect	inittext
   342  0478                     init_fetch0:	
   343                           ;	Called with low address in FSR and high address in W
   344                           
   345  0478  087E               	movf	btemp,w
   346  0479  008A               	movwf	10
   347  047A  087F               	movf	btemp+1,w
   348  047B  0082               	movwf	2
   349  047C                     init_ram0:	
   350                           ;Called with:
   351                           ;	high address of idata address in btemp 
   352                           ;	low address of idata address in btemp+1 
   353                           ;	low address of data in FSR
   354                           ;	high address + 1 of data in btemp-1
   355                           
   356  047C  120A  118A  2478  120A  118A  	fcall	init_fetch0
   357  0481  0080               	movwf	0
   358  0482  0A84               	incf	4,f
   359  0483  0804               	movf	4,w
   360  0484  067D               	xorwf	btemp+-1,w
   361  0485  1903               	btfsc	3,2
   362  0486  3400               	retlw	0
   363  0487  0AFF               	incf	btemp+1,f
   364  0488  1903               	btfsc	3,2
   365  0489  0AFE               	incf	btemp,f
   366  048A  2C7C               	goto	init_ram0
   367                           
   368                           	psect	cstackCOMMON
   369  0070                     __pcstackCOMMON:
   370  0070                     ?_lock_init:
   371  0070                     ?_checkPass:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ??_checkPass:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     ?_lcd_init:	
   378                           ; 1 bytes @ 0x0
   379                           
   380  0070                     ?_lcd_instruction:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0070                     ??_lcd_instruction:	
   384                           ; 1 bytes @ 0x0
   385                           
   386  0070                     ?_resetLock:	
   387                           ; 1 bytes @ 0x0
   388                           
   389  0070                     ?_keypad:	
   390                           ; 1 bytes @ 0x0
   391                           
   392  0070                     ?_tryAgain:	
   393                           ; 1 bytes @ 0x0
   394                           
   395  0070                     ?_main:	
   396                           ; 1 bytes @ 0x0
   397                           
   398  0070                     ?_lcd_data:	
   399                           ; 1 bytes @ 0x0
   400                           
   401  0070                     ??_lcd_data:	
   402                           ; 1 bytes @ 0x0
   403                           
   404  0070                     ?_getSize:	
   405                           ; 1 bytes @ 0x0
   406                           
   407                           
   408                           ; 2 bytes @ 0x0
   409  0070                     	ds	1
   410  0071                     checkPass@i:
   411                           
   412                           ; 2 bytes @ 0x1
   413  0071                     	ds	1
   414  0072                     ??_getSize:
   415  0072                     lcd_instruction@data:	
   416                           ; 1 bytes @ 0x2
   417                           
   418  0072                     lcd_data@data:	
   419                           ; 1 bytes @ 0x2
   420                           
   421                           
   422                           ; 1 bytes @ 0x2
   423  0072                     	ds	1
   424  0073                     ??_lcd_init:
   425  0073                     ?_lcd_string:	
   426                           ; 1 bytes @ 0x3
   427                           
   428  0073                     ??_keypad:	
   429                           ; 1 bytes @ 0x3
   430                           
   431  0073                     lcd_string@size:	
   432                           ; 1 bytes @ 0x3
   433                           
   434                           
   435                           ; 2 bytes @ 0x3
   436  0073                     	ds	1
   437  0074                     getSize@string:
   438                           
   439                           ; 1 bytes @ 0x4
   440  0074                     	ds	1
   441  0075                     ??_lcd_string:
   442  0075                     lcd_string@i:	
   443                           ; 1 bytes @ 0x5
   444                           
   445  0075                     getSize@i:	
   446                           ; 2 bytes @ 0x5
   447                           
   448                           
   449                           ; 2 bytes @ 0x5
   450  0075                     	ds	2
   451  0077                     lcd_string@string:
   452                           
   453                           ; 1 bytes @ 0x7
   454  0077                     	ds	1
   455  0078                     ??_lock_init:
   456  0078                     ??_tryAgain:	
   457                           ; 1 bytes @ 0x8
   458                           
   459                           
   460                           ; 1 bytes @ 0x8
   461  0078                     	ds	3
   462  007B                     ??_resetLock:
   463                           
   464                           ; 1 bytes @ 0xB
   465  007B                     	ds	1
   466  007C                     resetLock@i:
   467                           
   468                           ; 2 bytes @ 0xC
   469  007C                     	ds	2
   470                           
   471                           	psect	cstackBANK0
   472  002E                     __pcstackBANK0:
   473  002E                     ??_main:
   474                           
   475                           ; 1 bytes @ 0x0
   476  002E                     	ds	3
   477                           
   478                           	psect	maintext
   479  0602                     __pmaintext:	
   480 ;;
   481 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   482 ;;
   483 ;; *************** function _main *****************
   484 ;; Defined at:
   485 ;;		line 37 in file "main.c"
   486 ;; Parameters:    Size  Location     Type
   487 ;;		None
   488 ;; Auto vars:     Size  Location     Type
   489 ;;		None
   490 ;; Return value:  Size  Location     Type
   491 ;;                  1    wreg      void 
   492 ;; Registers used:
   493 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   494 ;; Tracked objects:
   495 ;;		On entry : B00/0
   496 ;;		On exit  : 0/0
   497 ;;		Unchanged: 0/0
   498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   499 ;;      Params:         0       0       0       0       0
   500 ;;      Locals:         0       0       0       0       0
   501 ;;      Temps:          0       3       0       0       0
   502 ;;      Totals:         0       3       0       0       0
   503 ;;Total ram usage:        3 bytes
   504 ;; Hardware stack levels required when called: 4
   505 ;; This function calls:
   506 ;;		_checkPass
   507 ;;		_getSize
   508 ;;		_keypad
   509 ;;		_lcd_init
   510 ;;		_lcd_instruction
   511 ;;		_lcd_string
   512 ;;		_lock_init
   513 ;;		_resetLock
   514 ;;		_tryAgain
   515 ;; This function is called by:
   516 ;;		Startup code after reset
   517 ;; This function uses a non-reentrant model
   518 ;;
   519                           
   520  0602                     _main:	
   521                           ;psect for function _main
   522                           
   523  0602                     l1213:	
   524                           ;incstack = 0
   525                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   526                           
   527                           
   528                           ;main.c: 39:     TRISA = 0;
   529  0602  1683               	bsf	3,5	;RP0=1, select bank1
   530  0603  1303               	bcf	3,6	;RP1=0, select bank1
   531  0604  0185               	clrf	5	;volatile
   532  0605                     l1215:
   533                           
   534                           ;main.c: 40:     TRISB = 0xF0;
   535  0605  30F0               	movlw	240
   536  0606  0086               	movwf	6	;volatile
   537  0607                     l1217:
   538                           
   539                           ;main.c: 41:     TRISC = 0;
   540  0607  0187               	clrf	7	;volatile
   541  0608                     l1219:
   542                           
   543                           ;main.c: 42:     TRISD = 0;
   544  0608  0188               	clrf	8	;volatile
   545  0609                     l1221:
   546                           
   547                           ;main.c: 45:     lock_init();
   548  0609  120A  118A  2572  120A  118A  	fcall	_lock_init
   549  060E                     l1223:
   550                           
   551                           ;main.c: 47:     passwordMaxLength = getSize(&defaultPassword);
   552  060E  3025               	movlw	(low (_defaultPassword| 0))& (0+255)
   553  060F  120A  118A  24EE  120A  118A  	fcall	_getSize
   554  0614  0871               	movf	?_getSize+1,w
   555  0615  1283               	bcf	3,5	;RP0=0, select bank0
   556  0616  1303               	bcf	3,6	;RP1=0, select bank0
   557  0617  00AB               	movwf	_passwordMaxLength+1
   558  0618  0870               	movf	?_getSize,w
   559  0619  00AA               	movwf	_passwordMaxLength
   560  061A                     l1225:
   561                           
   562                           ;main.c: 50:     {;main.c: 51:         if(checkPass())
   563  061A  120A  118A  253D  120A  118A  	fcall	_checkPass
   564  061F  3A00               	xorlw	0
   565  0620  1903               	skipnz
   566  0621  2E23               	goto	u631
   567  0622  2E24               	goto	u630
   568  0623                     u631:
   569  0623  2E54               	goto	l1239
   570  0624                     u630:
   571  0624                     l1227:
   572                           
   573                           ;main.c: 52:         {;main.c: 53:             lcd_init();
   574  0624  120A  118A  24B3  120A  118A  	fcall	_lcd_init
   575                           
   576                           ;main.c: 54:             lcd_instruction(0x80);
   577  0629  3080               	movlw	128
   578  062A  120A  118A  249F  120A  118A  	fcall	_lcd_instruction
   579  062F                     l1229:
   580                           
   581                           ;main.c: 55:             lcd_string("   UNLOCKED", 11);
   582  062F  300B               	movlw	11
   583  0630  00F3               	movwf	lcd_string@size
   584  0631  3000               	movlw	0
   585  0632  00F4               	movwf	lcd_string@size+1
   586  0633  301E               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   587  0634  120A  118A  24CC  120A  118A  	fcall	_lcd_string
   588  0639                     l1231:
   589                           
   590                           ;main.c: 56:             PORTA = 0xFF;
   591  0639  30FF               	movlw	255
   592  063A  1283               	bcf	3,5	;RP0=0, select bank0
   593  063B  1303               	bcf	3,6	;RP1=0, select bank0
   594  063C  0085               	movwf	5	;volatile
   595  063D                     l1233:
   596                           
   597                           ;main.c: 57:             _delay((unsigned long)((10000)*(4000000/4000.0)));
   598  063D  3033               	movlw	51
   599  063E  1283               	bcf	3,5	;RP0=0, select bank0
   600  063F  1303               	bcf	3,6	;RP1=0, select bank0
   601  0640  00B0               	movwf	??_main+2
   602  0641  30BB               	movlw	187
   603  0642  00AF               	movwf	??_main+1
   604  0643  30DF               	movlw	223
   605  0644  00AE               	movwf	??_main
   606  0645                     u657:
   607  0645  0BAE               	decfsz	??_main,f
   608  0646  2E45               	goto	u657
   609  0647  0BAF               	decfsz	??_main+1,f
   610  0648  2E45               	goto	u657
   611  0649  0BB0               	decfsz	??_main+2,f
   612  064A  2E45               	goto	u657
   613  064B                     l1235:
   614                           
   615                           ;main.c: 59:             PORTA = 0x00;
   616  064B  1283               	bcf	3,5	;RP0=0, select bank0
   617  064C  1303               	bcf	3,6	;RP1=0, select bank0
   618  064D  0185               	clrf	5	;volatile
   619  064E                     l1237:
   620                           
   621                           ;main.c: 60:             resetLock();
   622  064E  120A  118A  2512  120A  118A  	fcall	_resetLock
   623                           
   624                           ;main.c: 61:         }
   625  0653  2E1A               	goto	l1225
   626  0654                     l1239:
   627                           
   628                           ;main.c: 63:         {;main.c: 64:             keypad();
   629  0654  120A  118A  2676  120A  118A  	fcall	_keypad
   630  0659                     l1241:
   631                           
   632                           ;main.c: 65:             if(passwordCurrentLength > passwordMaxLength)
   633  0659  1283               	bcf	3,5	;RP0=0, select bank0
   634  065A  1303               	bcf	3,6	;RP1=0, select bank0
   635  065B  082B               	movf	_passwordMaxLength+1,w
   636  065C  3A80               	xorlw	128
   637  065D  00AE               	movwf	??_main
   638  065E  082D               	movf	_passwordCurrentLength+1,w
   639  065F  3A80               	xorlw	128
   640  0660  022E               	subwf	??_main,w
   641  0661  1D03               	skipz
   642  0662  2E65               	goto	u645
   643  0663  082C               	movf	_passwordCurrentLength,w
   644  0664  022A               	subwf	_passwordMaxLength,w
   645  0665                     u645:
   646  0665  1803               	skipnc
   647  0666  2E68               	goto	u641
   648  0667  2E69               	goto	u640
   649  0668                     u641:
   650  0668  2E1A               	goto	l1225
   651  0669                     u640:
   652  0669                     l1243:
   653                           
   654                           ;main.c: 66:             {;main.c: 67:                 passwordCurrentLength = 0;
   655  0669  1283               	bcf	3,5	;RP0=0, select bank0
   656  066A  1303               	bcf	3,6	;RP1=0, select bank0
   657  066B  01AC               	clrf	_passwordCurrentLength
   658  066C  01AD               	clrf	_passwordCurrentLength+1
   659  066D                     l1245:
   660                           
   661                           ;main.c: 68:                 tryAgain();
   662  066D  120A  118A  25BA  120A  118A  	fcall	_tryAgain
   663  0672  2E1A               	goto	l1225
   664  0673  120A  118A  2800   	ljmp	start
   665  0676                     __end_of_main:
   666                           
   667                           	psect	text1
   668  05BA                     __ptext1:	
   669 ;; *************** function _tryAgain *****************
   670 ;; Defined at:
   671 ;;		line 259 in file "main.c"
   672 ;; Parameters:    Size  Location     Type
   673 ;;		None
   674 ;; Auto vars:     Size  Location     Type
   675 ;;		None
   676 ;; Return value:  Size  Location     Type
   677 ;;                  1    wreg      void 
   678 ;; Registers used:
   679 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   680 ;; Tracked objects:
   681 ;;		On entry : 0/0
   682 ;;		On exit  : 0/0
   683 ;;		Unchanged: 0/0
   684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   685 ;;      Params:         0       0       0       0       0
   686 ;;      Locals:         0       0       0       0       0
   687 ;;      Temps:          3       0       0       0       0
   688 ;;      Totals:         3       0       0       0       0
   689 ;;Total ram usage:        3 bytes
   690 ;; Hardware stack levels used: 1
   691 ;; Hardware stack levels required when called: 2
   692 ;; This function calls:
   693 ;;		_lcd_init
   694 ;;		_lcd_instruction
   695 ;;		_lcd_string
   696 ;; This function is called by:
   697 ;;		_main
   698 ;; This function uses a non-reentrant model
   699 ;;
   700                           
   701  05BA                     _tryAgain:	
   702                           ;psect for function _tryAgain
   703                           
   704  05BA                     l1197:	
   705                           ;incstack = 0
   706                           ; Regs used in _tryAgain: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   707                           
   708                           
   709                           ;main.c: 261:     lcd_init();
   710  05BA  120A  118A  24B3  120A  118A  	fcall	_lcd_init
   711                           
   712                           ;main.c: 262:     lcd_instruction(0x80);
   713  05BF  3080               	movlw	128
   714  05C0  120A  118A  249F  120A  118A  	fcall	_lcd_instruction
   715  05C5                     l1199:
   716                           
   717                           ;main.c: 263:     lcd_string("   TRY AGAIN", 12);
   718  05C5  300C               	movlw	12
   719  05C6  00F3               	movwf	lcd_string@size
   720  05C7  3000               	movlw	0
   721  05C8  00F4               	movwf	lcd_string@size+1
   722  05C9  3011               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   723  05CA  120A  118A  24CC  120A  118A  	fcall	_lcd_string
   724  05CF                     l1201:
   725                           
   726                           ;main.c: 265:     _delay((unsigned long)((10000)*(4000000/4000.0)));
   727  05CF  3033               	movlw	51
   728  05D0  00FA               	movwf	??_tryAgain+2
   729  05D1  30BB               	movlw	187
   730  05D2  00F9               	movwf	??_tryAgain+1
   731  05D3  30DF               	movlw	223
   732  05D4  00F8               	movwf	??_tryAgain
   733  05D5                     u667:
   734  05D5  0BF8               	decfsz	??_tryAgain,f
   735  05D6  2DD5               	goto	u667
   736  05D7  0BF9               	decfsz	??_tryAgain+1,f
   737  05D8  2DD5               	goto	u667
   738  05D9  0BFA               	decfsz	??_tryAgain+2,f
   739  05DA  2DD5               	goto	u667
   740  05DB  2DDC               	nop2
   741  05DC                     l1203:
   742                           
   743                           ;main.c: 267:     lcd_init();
   744  05DC  120A  118A  24B3  120A  118A  	fcall	_lcd_init
   745  05E1                     l1205:
   746                           
   747                           ;main.c: 268:     lcd_instruction(0x80);
   748  05E1  3080               	movlw	128
   749  05E2  120A  118A  249F  120A  118A  	fcall	_lcd_instruction
   750  05E7                     l1207:
   751                           
   752                           ;main.c: 269:     lcd_string(" Enter Password", 15);
   753  05E7  300F               	movlw	15
   754  05E8  00F3               	movwf	lcd_string@size
   755  05E9  3000               	movlw	0
   756  05EA  00F4               	movwf	lcd_string@size+1
   757  05EB  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   758  05EC  120A  118A  24CC  120A  118A  	fcall	_lcd_string
   759  05F1                     l1209:
   760                           
   761                           ;main.c: 271:     lcd_instruction(0xC0);
   762  05F1  30C0               	movlw	192
   763  05F2  120A  118A  249F  120A  118A  	fcall	_lcd_instruction
   764  05F7                     l1211:
   765                           
   766                           ;main.c: 272:     lcd_string("     ", 5);
   767  05F7  3005               	movlw	5
   768  05F8  00F3               	movwf	lcd_string@size
   769  05F9  3000               	movlw	0
   770  05FA  00F4               	movwf	lcd_string@size+1
   771  05FB  3036               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   772  05FC  120A  118A  24CC  120A  118A  	fcall	_lcd_string
   773  0601                     l163:
   774  0601  0008               	return
   775  0602                     __end_of_tryAgain:
   776                           
   777                           	psect	text2
   778  0512                     __ptext2:	
   779 ;; *************** function _resetLock *****************
   780 ;; Defined at:
   781 ;;		line 233 in file "main.c"
   782 ;; Parameters:    Size  Location     Type
   783 ;;		None
   784 ;; Auto vars:     Size  Location     Type
   785 ;;  i               2   12[COMMON] int 
   786 ;; Return value:  Size  Location     Type
   787 ;;                  1    wreg      void 
   788 ;; Registers used:
   789 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   790 ;; Tracked objects:
   791 ;;		On entry : 0/0
   792 ;;		On exit  : 0/0
   793 ;;		Unchanged: 0/0
   794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   795 ;;      Params:         0       0       0       0       0
   796 ;;      Locals:         2       0       0       0       0
   797 ;;      Temps:          1       0       0       0       0
   798 ;;      Totals:         3       0       0       0       0
   799 ;;Total ram usage:        3 bytes
   800 ;; Hardware stack levels used: 1
   801 ;; Hardware stack levels required when called: 3
   802 ;; This function calls:
   803 ;;		_lock_init
   804 ;; This function is called by:
   805 ;;		_main
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809  0512                     _resetLock:	
   810                           ;psect for function _resetLock
   811                           
   812  0512                     l1077:	
   813                           ;incstack = 0
   814                           ; Regs used in _resetLock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   815                           
   816                           
   817                           ;main.c: 235:     passwordCurrentLength = 0;
   818  0512  1283               	bcf	3,5	;RP0=0, select bank0
   819  0513  1303               	bcf	3,6	;RP1=0, select bank0
   820  0514  01AC               	clrf	_passwordCurrentLength
   821  0515  01AD               	clrf	_passwordCurrentLength+1
   822  0516                     l1079:
   823                           
   824                           ;main.c: 236:     lock_init();
   825  0516  120A  118A  2572  120A  118A  	fcall	_lock_init
   826  051B                     l1081:
   827                           
   828                           ;main.c: 237:     for(int i=0; i<passwordMaxLength; i++)
   829  051B  01FC               	clrf	resetLock@i
   830  051C  01FD               	clrf	resetLock@i+1
   831  051D  2D2C               	goto	l1087
   832  051E                     l1083:
   833                           
   834                           ;main.c: 238:     {;main.c: 239:         currentPassword[i] = '0';
   835  051E  3030               	movlw	48
   836  051F  00FB               	movwf	??_resetLock
   837  0520  087C               	movf	resetLock@i,w
   838  0521  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
   839  0522  0084               	movwf	4
   840  0523  087B               	movf	??_resetLock,w
   841  0524  1383               	bcf	3,7	;select IRP bank0
   842  0525  0080               	movwf	0
   843  0526                     l1085:
   844                           
   845                           ;main.c: 240:     }
   846  0526  3001               	movlw	1
   847  0527  07FC               	addwf	resetLock@i,f
   848  0528  1803               	skipnc
   849  0529  0AFD               	incf	resetLock@i+1,f
   850  052A  3000               	movlw	0
   851  052B  07FD               	addwf	resetLock@i+1,f
   852  052C                     l1087:
   853  052C  087D               	movf	resetLock@i+1,w
   854  052D  3A80               	xorlw	128
   855  052E  00FB               	movwf	??_resetLock
   856  052F  1283               	bcf	3,5	;RP0=0, select bank0
   857  0530  1303               	bcf	3,6	;RP1=0, select bank0
   858  0531  082B               	movf	_passwordMaxLength+1,w
   859  0532  3A80               	xorlw	128
   860  0533  027B               	subwf	??_resetLock,w
   861  0534  1D03               	skipz
   862  0535  2D38               	goto	u385
   863  0536  082A               	movf	_passwordMaxLength,w
   864  0537  027C               	subwf	resetLock@i,w
   865  0538                     u385:
   866  0538  1C03               	skipc
   867  0539  2D3B               	goto	u381
   868  053A  2D3C               	goto	u380
   869  053B                     u381:
   870  053B  2D1E               	goto	l1083
   871  053C                     u380:
   872  053C                     l157:
   873  053C  0008               	return
   874  053D                     __end_of_resetLock:
   875                           
   876                           	psect	text3
   877  0572                     __ptext3:	
   878 ;; *************** function _lock_init *****************
   879 ;; Defined at:
   880 ;;		line 243 in file "main.c"
   881 ;; Parameters:    Size  Location     Type
   882 ;;		None
   883 ;; Auto vars:     Size  Location     Type
   884 ;;		None
   885 ;; Return value:  Size  Location     Type
   886 ;;                  1    wreg      void 
   887 ;; Registers used:
   888 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   889 ;; Tracked objects:
   890 ;;		On entry : 0/0
   891 ;;		On exit  : 0/0
   892 ;;		Unchanged: 0/0
   893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   894 ;;      Params:         0       0       0       0       0
   895 ;;      Locals:         0       0       0       0       0
   896 ;;      Temps:          3       0       0       0       0
   897 ;;      Totals:         3       0       0       0       0
   898 ;;Total ram usage:        3 bytes
   899 ;; Hardware stack levels used: 1
   900 ;; Hardware stack levels required when called: 2
   901 ;; This function calls:
   902 ;;		_lcd_init
   903 ;;		_lcd_instruction
   904 ;;		_lcd_string
   905 ;; This function is called by:
   906 ;;		_main
   907 ;;		_resetLock
   908 ;; This function uses a non-reentrant model
   909 ;;
   910                           
   911  0572                     _lock_init:	
   912                           ;psect for function _lock_init
   913                           
   914  0572                     l1031:	
   915                           ;incstack = 0
   916                           ; Regs used in _lock_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   917                           
   918                           
   919                           ;main.c: 245:     lcd_init();
   920  0572  120A  118A  24B3  120A  118A  	fcall	_lcd_init
   921                           
   922                           ;main.c: 246:     lcd_instruction(0x80);
   923  0577  3080               	movlw	128
   924  0578  120A  118A  249F  120A  118A  	fcall	_lcd_instruction
   925  057D                     l1033:
   926                           
   927                           ;main.c: 247:     lcd_string("    Welcome", 11);
   928  057D  300B               	movlw	11
   929  057E  00F3               	movwf	lcd_string@size
   930  057F  3000               	movlw	0
   931  0580  00F4               	movwf	lcd_string@size+1
   932  0581  302A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   933  0582  120A  118A  24CC  120A  118A  	fcall	_lcd_string
   934  0587                     l1035:
   935                           
   936                           ;main.c: 249:     _delay((unsigned long)((10000)*(4000000/4000.0)));
   937  0587  3033               	movlw	51
   938  0588  00FA               	movwf	??_lock_init+2
   939  0589  30BB               	movlw	187
   940  058A  00F9               	movwf	??_lock_init+1
   941  058B  30DF               	movlw	223
   942  058C  00F8               	movwf	??_lock_init
   943  058D                     u677:
   944  058D  0BF8               	decfsz	??_lock_init,f
   945  058E  2D8D               	goto	u677
   946  058F  0BF9               	decfsz	??_lock_init+1,f
   947  0590  2D8D               	goto	u677
   948  0591  0BFA               	decfsz	??_lock_init+2,f
   949  0592  2D8D               	goto	u677
   950  0593  2D94               	nop2
   951  0594                     l1037:
   952                           
   953                           ;main.c: 251:     lcd_init();
   954  0594  120A  118A  24B3  120A  118A  	fcall	_lcd_init
   955  0599                     l1039:
   956                           
   957                           ;main.c: 252:     lcd_instruction(0x80);
   958  0599  3080               	movlw	128
   959  059A  120A  118A  249F  120A  118A  	fcall	_lcd_instruction
   960  059F                     l1041:
   961                           
   962                           ;main.c: 253:     lcd_string(" Enter Password", 15);
   963  059F  300F               	movlw	15
   964  05A0  00F3               	movwf	lcd_string@size
   965  05A1  3000               	movlw	0
   966  05A2  00F4               	movwf	lcd_string@size+1
   967  05A3  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   968  05A4  120A  118A  24CC  120A  118A  	fcall	_lcd_string
   969  05A9                     l1043:
   970                           
   971                           ;main.c: 255:     lcd_instruction(0xC0);
   972  05A9  30C0               	movlw	192
   973  05AA  120A  118A  249F  120A  118A  	fcall	_lcd_instruction
   974  05AF                     l1045:
   975                           
   976                           ;main.c: 256:     lcd_string("     ", 5);
   977  05AF  3005               	movlw	5
   978  05B0  00F3               	movwf	lcd_string@size
   979  05B1  3000               	movlw	0
   980  05B2  00F4               	movwf	lcd_string@size+1
   981  05B3  3036               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   982  05B4  120A  118A  24CC  120A  118A  	fcall	_lcd_string
   983  05B9                     l160:
   984  05B9  0008               	return
   985  05BA                     __end_of_lock_init:
   986                           
   987                           	psect	text4
   988  04CC                     __ptext4:	
   989 ;; *************** function _lcd_string *****************
   990 ;; Defined at:
   991 ;;		line 108 in file "main.c"
   992 ;; Parameters:    Size  Location     Type
   993 ;;  string          1    wreg     PTR unsigned char 
   994 ;;		 -> STR_7(6), STR_6(16), STR_5(13), STR_4(6), 
   995 ;;		 -> STR_3(16), STR_2(12), STR_1(12), 
   996 ;;  size            2    3[COMMON] unsigned int 
   997 ;; Auto vars:     Size  Location     Type
   998 ;;  string          1    7[COMMON] PTR unsigned char 
   999 ;;		 -> STR_7(6), STR_6(16), STR_5(13), STR_4(6), 
  1000 ;;		 -> STR_3(16), STR_2(12), STR_1(12), 
  1001 ;;  i               2    5[COMMON] unsigned int 
  1002 ;; Return value:  Size  Location     Type
  1003 ;;                  1    wreg      void 
  1004 ;; Registers used:
  1005 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1006 ;; Tracked objects:
  1007 ;;		On entry : 0/0
  1008 ;;		On exit  : 0/0
  1009 ;;		Unchanged: 0/0
  1010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1011 ;;      Params:         2       0       0       0       0
  1012 ;;      Locals:         3       0       0       0       0
  1013 ;;      Temps:          0       0       0       0       0
  1014 ;;      Totals:         5       0       0       0       0
  1015 ;;Total ram usage:        5 bytes
  1016 ;; Hardware stack levels used: 1
  1017 ;; Hardware stack levels required when called: 1
  1018 ;; This function calls:
  1019 ;;		_lcd_data
  1020 ;; This function is called by:
  1021 ;;		_main
  1022 ;;		_lock_init
  1023 ;;		_tryAgain
  1024 ;; This function uses a non-reentrant model
  1025 ;;
  1026                           
  1027  04CC                     _lcd_string:	
  1028                           ;psect for function _lcd_string
  1029                           
  1030                           
  1031                           ;incstack = 0
  1032                           ; Regs used in _lcd_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1033                           ;lcd_string@string stored from wreg
  1034  04CC  00F7               	movwf	lcd_string@string
  1035  04CD                     l1023:
  1036                           
  1037                           ;main.c: 108: void lcd_string(unsigned char* string, unsigned int size);main.c: 109: {;m
      +                          ain.c: 110:     for(unsigned int i=0; i<size; i++)
  1038  04CD  01F5               	clrf	lcd_string@i
  1039  04CE  01F6               	clrf	lcd_string@i+1
  1040  04CF  2CE3               	goto	l1029
  1041  04D0                     l1025:
  1042                           
  1043                           ;main.c: 111:     {;main.c: 112:         lcd_data(string[i]);
  1044  04D0  0875               	movf	lcd_string@i,w
  1045  04D1  0777               	addwf	lcd_string@string,w
  1046  04D2  0084               	movwf	4
  1047  04D3  120A  118A  2003  120A  118A  	fcall	stringdir
  1048  04D8  120A  118A  248B  120A  118A  	fcall	_lcd_data
  1049  04DD                     l1027:
  1050                           
  1051                           ;main.c: 113:     }
  1052  04DD  3001               	movlw	1
  1053  04DE  07F5               	addwf	lcd_string@i,f
  1054  04DF  1803               	skipnc
  1055  04E0  0AF6               	incf	lcd_string@i+1,f
  1056  04E1  3000               	movlw	0
  1057  04E2  07F6               	addwf	lcd_string@i+1,f
  1058  04E3                     l1029:
  1059  04E3  0874               	movf	lcd_string@size+1,w
  1060  04E4  0276               	subwf	lcd_string@i+1,w
  1061  04E5  1D03               	skipz
  1062  04E6  2CE9               	goto	u335
  1063  04E7  0873               	movf	lcd_string@size,w
  1064  04E8  0275               	subwf	lcd_string@i,w
  1065  04E9                     u335:
  1066  04E9  1C03               	skipc
  1067  04EA  2CEC               	goto	u331
  1068  04EB  2CED               	goto	u330
  1069  04EC                     u331:
  1070  04EC  2CD0               	goto	l1025
  1071  04ED                     u330:
  1072  04ED                     l86:
  1073  04ED  0008               	return
  1074  04EE                     __end_of_lcd_string:
  1075                           
  1076                           	psect	text5
  1077  04B3                     __ptext5:	
  1078 ;; *************** function _lcd_init *****************
  1079 ;; Defined at:
  1080 ;;		line 76 in file "main.c"
  1081 ;; Parameters:    Size  Location     Type
  1082 ;;		None
  1083 ;; Auto vars:     Size  Location     Type
  1084 ;;		None
  1085 ;; Return value:  Size  Location     Type
  1086 ;;                  1    wreg      void 
  1087 ;; Registers used:
  1088 ;;		wreg, status,2, status,0, pclath, cstack
  1089 ;; Tracked objects:
  1090 ;;		On entry : 0/0
  1091 ;;		On exit  : 0/0
  1092 ;;		Unchanged: 0/0
  1093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1094 ;;      Params:         0       0       0       0       0
  1095 ;;      Locals:         0       0       0       0       0
  1096 ;;      Temps:          0       0       0       0       0
  1097 ;;      Totals:         0       0       0       0       0
  1098 ;;Total ram usage:        0 bytes
  1099 ;; Hardware stack levels used: 1
  1100 ;; Hardware stack levels required when called: 1
  1101 ;; This function calls:
  1102 ;;		_lcd_instruction
  1103 ;; This function is called by:
  1104 ;;		_main
  1105 ;;		_lock_init
  1106 ;;		_tryAgain
  1107 ;; This function uses a non-reentrant model
  1108 ;;
  1109                           
  1110  04B3                     _lcd_init:	
  1111                           ;psect for function _lcd_init
  1112                           
  1113  04B3                     l1021:	
  1114                           ;incstack = 0
  1115                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  1116                           
  1117                           
  1118                           ;main.c: 78:     lcd_instruction(0x38);
  1119  04B3  3038               	movlw	56
  1120  04B4  120A  118A  249F  120A  118A  	fcall	_lcd_instruction
  1121                           
  1122                           ;main.c: 79:     lcd_instruction(0x0C);
  1123  04B9  300C               	movlw	12
  1124  04BA  120A  118A  249F  120A  118A  	fcall	_lcd_instruction
  1125                           
  1126                           ;main.c: 80:     lcd_instruction(0x06);
  1127  04BF  3006               	movlw	6
  1128  04C0  120A  118A  249F  120A  118A  	fcall	_lcd_instruction
  1129                           
  1130                           ;main.c: 81:     lcd_instruction(0x01);
  1131  04C5  3001               	movlw	1
  1132  04C6  120A  118A  249F  120A  118A  	fcall	_lcd_instruction
  1133  04CB                     l74:
  1134  04CB  0008               	return
  1135  04CC                     __end_of_lcd_init:
  1136                           
  1137                           	psect	text6
  1138  049F                     __ptext6:	
  1139 ;; *************** function _lcd_instruction *****************
  1140 ;; Defined at:
  1141 ;;		line 84 in file "main.c"
  1142 ;; Parameters:    Size  Location     Type
  1143 ;;  data            1    wreg     unsigned char 
  1144 ;; Auto vars:     Size  Location     Type
  1145 ;;  data            1    2[COMMON] unsigned char 
  1146 ;; Return value:  Size  Location     Type
  1147 ;;                  1    wreg      void 
  1148 ;; Registers used:
  1149 ;;		wreg
  1150 ;; Tracked objects:
  1151 ;;		On entry : 0/0
  1152 ;;		On exit  : 0/0
  1153 ;;		Unchanged: 0/0
  1154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1155 ;;      Params:         0       0       0       0       0
  1156 ;;      Locals:         1       0       0       0       0
  1157 ;;      Temps:          2       0       0       0       0
  1158 ;;      Totals:         3       0       0       0       0
  1159 ;;Total ram usage:        3 bytes
  1160 ;; Hardware stack levels used: 1
  1161 ;; This function calls:
  1162 ;;		Nothing
  1163 ;; This function is called by:
  1164 ;;		_main
  1165 ;;		_lcd_init
  1166 ;;		_lock_init
  1167 ;;		_tryAgain
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171  049F                     _lcd_instruction:	
  1172                           ;psect for function _lcd_instruction
  1173                           
  1174                           
  1175                           ;incstack = 0
  1176                           ; Regs used in _lcd_instruction: [wreg]
  1177                           ;lcd_instruction@data stored from wreg
  1178  049F  00F2               	movwf	lcd_instruction@data
  1179  04A0                     l1001:
  1180                           
  1181                           ;main.c: 84: void lcd_instruction(unsigned char data);main.c: 85: {;main.c: 86:     PORT
      +                          D = data;
  1182  04A0  0872               	movf	lcd_instruction@data,w
  1183  04A1  1283               	bcf	3,5	;RP0=0, select bank0
  1184  04A2  1303               	bcf	3,6	;RP1=0, select bank0
  1185  04A3  0088               	movwf	8	;volatile
  1186  04A4                     l1003:
  1187                           
  1188                           ;main.c: 87:     RC0 = 0;
  1189  04A4  1007               	bcf	7,0	;volatile
  1190  04A5                     l1005:
  1191                           
  1192                           ;main.c: 88:     RC1 = 0;
  1193  04A5  1087               	bcf	7,1	;volatile
  1194  04A6                     l1007:
  1195                           
  1196                           ;main.c: 89:     RC2 = 1;
  1197  04A6  1507               	bsf	7,2	;volatile
  1198                           
  1199                           ;main.c: 91:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1200  04A7  3007               	movlw	7
  1201  04A8  00F1               	movwf	??_lcd_instruction+1
  1202  04A9  307D               	movlw	125
  1203  04AA  00F0               	movwf	??_lcd_instruction
  1204  04AB                     u687:
  1205  04AB  0BF0               	decfsz	??_lcd_instruction,f
  1206  04AC  2CAB               	goto	u687
  1207  04AD  0BF1               	decfsz	??_lcd_instruction+1,f
  1208  04AE  2CAB               	goto	u687
  1209  04AF                     l1009:
  1210                           
  1211                           ;main.c: 93:     RC2 = 0;
  1212  04AF  1283               	bcf	3,5	;RP0=0, select bank0
  1213  04B0  1303               	bcf	3,6	;RP1=0, select bank0
  1214  04B1  1107               	bcf	7,2	;volatile
  1215  04B2                     l77:
  1216  04B2  0008               	return
  1217  04B3                     __end_of_lcd_instruction:
  1218                           
  1219                           	psect	text7
  1220  0676                     __ptext7:	
  1221 ;; *************** function _keypad *****************
  1222 ;; Defined at:
  1223 ;;		line 116 in file "main.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;		None
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;		None
  1228 ;; Return value:  Size  Location     Type
  1229 ;;                  1    wreg      void 
  1230 ;; Registers used:
  1231 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1232 ;; Tracked objects:
  1233 ;;		On entry : 0/0
  1234 ;;		On exit  : 0/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1237 ;;      Params:         0       0       0       0       0
  1238 ;;      Locals:         0       0       0       0       0
  1239 ;;      Temps:          1       0       0       0       0
  1240 ;;      Totals:         1       0       0       0       0
  1241 ;;Total ram usage:        1 bytes
  1242 ;; Hardware stack levels used: 1
  1243 ;; Hardware stack levels required when called: 1
  1244 ;; This function calls:
  1245 ;;		_lcd_data
  1246 ;; This function is called by:
  1247 ;;		_main
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251  0676                     _keypad:	
  1252                           ;psect for function _keypad
  1253                           
  1254  0676                     l1089:	
  1255                           ;incstack = 0
  1256                           ; Regs used in _keypad: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1257                           
  1258                           
  1259                           ;main.c: 118:     RB0 = 1; RB1 = 0; RB2 = 0;
  1260  0676  1283               	bcf	3,5	;RP0=0, select bank0
  1261  0677  1303               	bcf	3,6	;RP1=0, select bank0
  1262  0678  1406               	bsf	6,0	;volatile
  1263  0679  1086               	bcf	6,1	;volatile
  1264  067A  1106               	bcf	6,2	;volatile
  1265                           
  1266                           ;main.c: 120:     if(RB4 == 1)
  1267  067B  1E06               	btfss	6,4	;volatile
  1268  067C  2E7E               	goto	u391
  1269  067D  2E7F               	goto	u390
  1270  067E                     u391:
  1271  067E  2E99               	goto	l1097
  1272  067F                     u390:
  1273  067F                     l1091:
  1274                           
  1275                           ;main.c: 121:     {;main.c: 122:         lcd_data('1');
  1276  067F  3031               	movlw	49
  1277  0680  120A  118A  248B  120A  118A  	fcall	_lcd_data
  1278  0685                     l90:	
  1279                           ;main.c: 123:         while(RB4 == 1);
  1280                           
  1281  0685  1283               	bcf	3,5	;RP0=0, select bank0
  1282  0686  1303               	bcf	3,6	;RP1=0, select bank0
  1283  0687  1A06               	btfsc	6,4	;volatile
  1284  0688  2E8A               	goto	u401
  1285  0689  2E8B               	goto	u400
  1286  068A                     u401:
  1287  068A  2E85               	goto	l90
  1288  068B                     u400:
  1289  068B                     l1093:
  1290                           
  1291                           ;main.c: 124:         currentPassword[passwordCurrentLength] = '1';
  1292  068B  3031               	movlw	49
  1293  068C  00F3               	movwf	??_keypad
  1294  068D  082C               	movf	_passwordCurrentLength,w
  1295  068E  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1296  068F  0084               	movwf	4
  1297  0690  0873               	movf	??_keypad,w
  1298  0691  1383               	bcf	3,7	;select IRP bank0
  1299  0692  0080               	movwf	0
  1300  0693                     l1095:
  1301                           
  1302                           ;main.c: 125:         passwordCurrentLength++;
  1303  0693  3001               	movlw	1
  1304  0694  07AC               	addwf	_passwordCurrentLength,f
  1305  0695  1803               	skipnc
  1306  0696  0AAD               	incf	_passwordCurrentLength+1,f
  1307  0697  3000               	movlw	0
  1308  0698  07AD               	addwf	_passwordCurrentLength+1,f
  1309  0699                     l1097:
  1310                           
  1311                           ;main.c: 127:     if(RB5 == 1)
  1312  0699  1E86               	btfss	6,5	;volatile
  1313  069A  2E9C               	goto	u411
  1314  069B  2E9D               	goto	u410
  1315  069C                     u411:
  1316  069C  2EB7               	goto	l1105
  1317  069D                     u410:
  1318  069D                     l1099:
  1319                           
  1320                           ;main.c: 128:     {;main.c: 129:         lcd_data('4');
  1321  069D  3034               	movlw	52
  1322  069E  120A  118A  248B  120A  118A  	fcall	_lcd_data
  1323  06A3                     l94:	
  1324                           ;main.c: 130:         while(RB5 == 1);
  1325                           
  1326  06A3  1283               	bcf	3,5	;RP0=0, select bank0
  1327  06A4  1303               	bcf	3,6	;RP1=0, select bank0
  1328  06A5  1A86               	btfsc	6,5	;volatile
  1329  06A6  2EA8               	goto	u421
  1330  06A7  2EA9               	goto	u420
  1331  06A8                     u421:
  1332  06A8  2EA3               	goto	l94
  1333  06A9                     u420:
  1334  06A9                     l1101:
  1335                           
  1336                           ;main.c: 131:         currentPassword[passwordCurrentLength] = '4';
  1337  06A9  3034               	movlw	52
  1338  06AA  00F3               	movwf	??_keypad
  1339  06AB  082C               	movf	_passwordCurrentLength,w
  1340  06AC  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1341  06AD  0084               	movwf	4
  1342  06AE  0873               	movf	??_keypad,w
  1343  06AF  1383               	bcf	3,7	;select IRP bank0
  1344  06B0  0080               	movwf	0
  1345  06B1                     l1103:
  1346                           
  1347                           ;main.c: 132:         passwordCurrentLength++;
  1348  06B1  3001               	movlw	1
  1349  06B2  07AC               	addwf	_passwordCurrentLength,f
  1350  06B3  1803               	skipnc
  1351  06B4  0AAD               	incf	_passwordCurrentLength+1,f
  1352  06B5  3000               	movlw	0
  1353  06B6  07AD               	addwf	_passwordCurrentLength+1,f
  1354  06B7                     l1105:
  1355                           
  1356                           ;main.c: 134:     if(RB6 == 1)
  1357  06B7  1F06               	btfss	6,6	;volatile
  1358  06B8  2EBA               	goto	u431
  1359  06B9  2EBB               	goto	u430
  1360  06BA                     u431:
  1361  06BA  2ED5               	goto	l1113
  1362  06BB                     u430:
  1363  06BB                     l1107:
  1364                           
  1365                           ;main.c: 135:     {;main.c: 136:         lcd_data('7');
  1366  06BB  3037               	movlw	55
  1367  06BC  120A  118A  248B  120A  118A  	fcall	_lcd_data
  1368  06C1                     l98:	
  1369                           ;main.c: 137:         while(RB6 == 1);
  1370                           
  1371  06C1  1283               	bcf	3,5	;RP0=0, select bank0
  1372  06C2  1303               	bcf	3,6	;RP1=0, select bank0
  1373  06C3  1B06               	btfsc	6,6	;volatile
  1374  06C4  2EC6               	goto	u441
  1375  06C5  2EC7               	goto	u440
  1376  06C6                     u441:
  1377  06C6  2EC1               	goto	l98
  1378  06C7                     u440:
  1379  06C7                     l1109:
  1380                           
  1381                           ;main.c: 138:         currentPassword[passwordCurrentLength] = '7';
  1382  06C7  3037               	movlw	55
  1383  06C8  00F3               	movwf	??_keypad
  1384  06C9  082C               	movf	_passwordCurrentLength,w
  1385  06CA  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1386  06CB  0084               	movwf	4
  1387  06CC  0873               	movf	??_keypad,w
  1388  06CD  1383               	bcf	3,7	;select IRP bank0
  1389  06CE  0080               	movwf	0
  1390  06CF                     l1111:
  1391                           
  1392                           ;main.c: 139:         passwordCurrentLength++;
  1393  06CF  3001               	movlw	1
  1394  06D0  07AC               	addwf	_passwordCurrentLength,f
  1395  06D1  1803               	skipnc
  1396  06D2  0AAD               	incf	_passwordCurrentLength+1,f
  1397  06D3  3000               	movlw	0
  1398  06D4  07AD               	addwf	_passwordCurrentLength+1,f
  1399  06D5                     l1113:
  1400                           
  1401                           ;main.c: 141:     if(RB7 == 1)
  1402  06D5  1F86               	btfss	6,7	;volatile
  1403  06D6  2ED8               	goto	u451
  1404  06D7  2ED9               	goto	u450
  1405  06D8                     u451:
  1406  06D8  2EF3               	goto	l1121
  1407  06D9                     u450:
  1408  06D9                     l1115:
  1409                           
  1410                           ;main.c: 142:     {;main.c: 143:         lcd_data('*');
  1411  06D9  302A               	movlw	42
  1412  06DA  120A  118A  248B  120A  118A  	fcall	_lcd_data
  1413  06DF                     l102:	
  1414                           ;main.c: 144:         while(RB7 == 1);
  1415                           
  1416  06DF  1283               	bcf	3,5	;RP0=0, select bank0
  1417  06E0  1303               	bcf	3,6	;RP1=0, select bank0
  1418  06E1  1B86               	btfsc	6,7	;volatile
  1419  06E2  2EE4               	goto	u461
  1420  06E3  2EE5               	goto	u460
  1421  06E4                     u461:
  1422  06E4  2EDF               	goto	l102
  1423  06E5                     u460:
  1424  06E5                     l1117:
  1425                           
  1426                           ;main.c: 145:         currentPassword[passwordCurrentLength] = '*';
  1427  06E5  302A               	movlw	42
  1428  06E6  00F3               	movwf	??_keypad
  1429  06E7  082C               	movf	_passwordCurrentLength,w
  1430  06E8  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1431  06E9  0084               	movwf	4
  1432  06EA  0873               	movf	??_keypad,w
  1433  06EB  1383               	bcf	3,7	;select IRP bank0
  1434  06EC  0080               	movwf	0
  1435  06ED                     l1119:
  1436                           
  1437                           ;main.c: 146:         passwordCurrentLength++;
  1438  06ED  3001               	movlw	1
  1439  06EE  07AC               	addwf	_passwordCurrentLength,f
  1440  06EF  1803               	skipnc
  1441  06F0  0AAD               	incf	_passwordCurrentLength+1,f
  1442  06F1  3000               	movlw	0
  1443  06F2  07AD               	addwf	_passwordCurrentLength+1,f
  1444  06F3                     l1121:
  1445                           
  1446                           ;main.c: 149:     RB0 = 0; RB1 = 1; RB2 = 0;
  1447  06F3  1006               	bcf	6,0	;volatile
  1448  06F4                     l1123:
  1449  06F4  1486               	bsf	6,1	;volatile
  1450  06F5                     l1125:
  1451  06F5  1106               	bcf	6,2	;volatile
  1452  06F6                     l1127:
  1453                           
  1454                           ;main.c: 151:     if(RB4 == 1)
  1455  06F6  1E06               	btfss	6,4	;volatile
  1456  06F7  2EF9               	goto	u471
  1457  06F8  2EFA               	goto	u470
  1458  06F9                     u471:
  1459  06F9  2F14               	goto	l1135
  1460  06FA                     u470:
  1461  06FA                     l1129:
  1462                           
  1463                           ;main.c: 152:     {;main.c: 153:         lcd_data('2');
  1464  06FA  3032               	movlw	50
  1465  06FB  120A  118A  248B  120A  118A  	fcall	_lcd_data
  1466  0700                     l106:	
  1467                           ;main.c: 154:         while(RB4 == 1);
  1468                           
  1469  0700  1283               	bcf	3,5	;RP0=0, select bank0
  1470  0701  1303               	bcf	3,6	;RP1=0, select bank0
  1471  0702  1A06               	btfsc	6,4	;volatile
  1472  0703  2F05               	goto	u481
  1473  0704  2F06               	goto	u480
  1474  0705                     u481:
  1475  0705  2F00               	goto	l106
  1476  0706                     u480:
  1477  0706                     l1131:
  1478                           
  1479                           ;main.c: 155:         currentPassword[passwordCurrentLength] = '2';
  1480  0706  3032               	movlw	50
  1481  0707  00F3               	movwf	??_keypad
  1482  0708  082C               	movf	_passwordCurrentLength,w
  1483  0709  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1484  070A  0084               	movwf	4
  1485  070B  0873               	movf	??_keypad,w
  1486  070C  1383               	bcf	3,7	;select IRP bank0
  1487  070D  0080               	movwf	0
  1488  070E                     l1133:
  1489                           
  1490                           ;main.c: 156:         passwordCurrentLength++;
  1491  070E  3001               	movlw	1
  1492  070F  07AC               	addwf	_passwordCurrentLength,f
  1493  0710  1803               	skipnc
  1494  0711  0AAD               	incf	_passwordCurrentLength+1,f
  1495  0712  3000               	movlw	0
  1496  0713  07AD               	addwf	_passwordCurrentLength+1,f
  1497  0714                     l1135:
  1498                           
  1499                           ;main.c: 158:     if(RB5 == 1)
  1500  0714  1E86               	btfss	6,5	;volatile
  1501  0715  2F17               	goto	u491
  1502  0716  2F18               	goto	u490
  1503  0717                     u491:
  1504  0717  2F32               	goto	l1143
  1505  0718                     u490:
  1506  0718                     l1137:
  1507                           
  1508                           ;main.c: 159:     {;main.c: 160:         lcd_data('5');
  1509  0718  3035               	movlw	53
  1510  0719  120A  118A  248B  120A  118A  	fcall	_lcd_data
  1511  071E                     l110:	
  1512                           ;main.c: 161:         while(RB5 == 1);
  1513                           
  1514  071E  1283               	bcf	3,5	;RP0=0, select bank0
  1515  071F  1303               	bcf	3,6	;RP1=0, select bank0
  1516  0720  1A86               	btfsc	6,5	;volatile
  1517  0721  2F23               	goto	u501
  1518  0722  2F24               	goto	u500
  1519  0723                     u501:
  1520  0723  2F1E               	goto	l110
  1521  0724                     u500:
  1522  0724                     l1139:
  1523                           
  1524                           ;main.c: 162:         currentPassword[passwordCurrentLength] = '5';
  1525  0724  3035               	movlw	53
  1526  0725  00F3               	movwf	??_keypad
  1527  0726  082C               	movf	_passwordCurrentLength,w
  1528  0727  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1529  0728  0084               	movwf	4
  1530  0729  0873               	movf	??_keypad,w
  1531  072A  1383               	bcf	3,7	;select IRP bank0
  1532  072B  0080               	movwf	0
  1533  072C                     l1141:
  1534                           
  1535                           ;main.c: 163:         passwordCurrentLength++;
  1536  072C  3001               	movlw	1
  1537  072D  07AC               	addwf	_passwordCurrentLength,f
  1538  072E  1803               	skipnc
  1539  072F  0AAD               	incf	_passwordCurrentLength+1,f
  1540  0730  3000               	movlw	0
  1541  0731  07AD               	addwf	_passwordCurrentLength+1,f
  1542  0732                     l1143:
  1543                           
  1544                           ;main.c: 165:     if(RB6 == 1)
  1545  0732  1F06               	btfss	6,6	;volatile
  1546  0733  2F35               	goto	u511
  1547  0734  2F36               	goto	u510
  1548  0735                     u511:
  1549  0735  2F50               	goto	l1151
  1550  0736                     u510:
  1551  0736                     l1145:
  1552                           
  1553                           ;main.c: 166:     {;main.c: 167:         lcd_data('8');
  1554  0736  3038               	movlw	56
  1555  0737  120A  118A  248B  120A  118A  	fcall	_lcd_data
  1556  073C                     l114:	
  1557                           ;main.c: 168:         while(RB6 == 1);
  1558                           
  1559  073C  1283               	bcf	3,5	;RP0=0, select bank0
  1560  073D  1303               	bcf	3,6	;RP1=0, select bank0
  1561  073E  1B06               	btfsc	6,6	;volatile
  1562  073F  2F41               	goto	u521
  1563  0740  2F42               	goto	u520
  1564  0741                     u521:
  1565  0741  2F3C               	goto	l114
  1566  0742                     u520:
  1567  0742                     l1147:
  1568                           
  1569                           ;main.c: 169:         currentPassword[passwordCurrentLength] = '8';
  1570  0742  3038               	movlw	56
  1571  0743  00F3               	movwf	??_keypad
  1572  0744  082C               	movf	_passwordCurrentLength,w
  1573  0745  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1574  0746  0084               	movwf	4
  1575  0747  0873               	movf	??_keypad,w
  1576  0748  1383               	bcf	3,7	;select IRP bank0
  1577  0749  0080               	movwf	0
  1578  074A                     l1149:
  1579                           
  1580                           ;main.c: 170:         passwordCurrentLength++;
  1581  074A  3001               	movlw	1
  1582  074B  07AC               	addwf	_passwordCurrentLength,f
  1583  074C  1803               	skipnc
  1584  074D  0AAD               	incf	_passwordCurrentLength+1,f
  1585  074E  3000               	movlw	0
  1586  074F  07AD               	addwf	_passwordCurrentLength+1,f
  1587  0750                     l1151:
  1588                           
  1589                           ;main.c: 172:     if(RB7 == 1)
  1590  0750  1F86               	btfss	6,7	;volatile
  1591  0751  2F53               	goto	u531
  1592  0752  2F54               	goto	u530
  1593  0753                     u531:
  1594  0753  2F6E               	goto	l1159
  1595  0754                     u530:
  1596  0754                     l1153:
  1597                           
  1598                           ;main.c: 173:     {;main.c: 174:         lcd_data('0');
  1599  0754  3030               	movlw	48
  1600  0755  120A  118A  248B  120A  118A  	fcall	_lcd_data
  1601  075A                     l118:	
  1602                           ;main.c: 175:         while(RB7 == 1);
  1603                           
  1604  075A  1283               	bcf	3,5	;RP0=0, select bank0
  1605  075B  1303               	bcf	3,6	;RP1=0, select bank0
  1606  075C  1B86               	btfsc	6,7	;volatile
  1607  075D  2F5F               	goto	u541
  1608  075E  2F60               	goto	u540
  1609  075F                     u541:
  1610  075F  2F5A               	goto	l118
  1611  0760                     u540:
  1612  0760                     l1155:
  1613                           
  1614                           ;main.c: 176:         currentPassword[passwordCurrentLength] = '0';
  1615  0760  3030               	movlw	48
  1616  0761  00F3               	movwf	??_keypad
  1617  0762  082C               	movf	_passwordCurrentLength,w
  1618  0763  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1619  0764  0084               	movwf	4
  1620  0765  0873               	movf	??_keypad,w
  1621  0766  1383               	bcf	3,7	;select IRP bank0
  1622  0767  0080               	movwf	0
  1623  0768                     l1157:
  1624                           
  1625                           ;main.c: 177:         passwordCurrentLength++;
  1626  0768  3001               	movlw	1
  1627  0769  07AC               	addwf	_passwordCurrentLength,f
  1628  076A  1803               	skipnc
  1629  076B  0AAD               	incf	_passwordCurrentLength+1,f
  1630  076C  3000               	movlw	0
  1631  076D  07AD               	addwf	_passwordCurrentLength+1,f
  1632  076E                     l1159:
  1633                           
  1634                           ;main.c: 180:     RB0 = 0; RB1 = 0; RB2 = 1;
  1635  076E  1006               	bcf	6,0	;volatile
  1636  076F                     l1161:
  1637  076F  1086               	bcf	6,1	;volatile
  1638  0770                     l1163:
  1639  0770  1506               	bsf	6,2	;volatile
  1640  0771                     l1165:
  1641                           
  1642                           ;main.c: 182:     if(RB4 == 1)
  1643  0771  1E06               	btfss	6,4	;volatile
  1644  0772  2F74               	goto	u551
  1645  0773  2F75               	goto	u550
  1646  0774                     u551:
  1647  0774  2F8F               	goto	l1173
  1648  0775                     u550:
  1649  0775                     l1167:
  1650                           
  1651                           ;main.c: 183:     {;main.c: 184:         lcd_data('3');
  1652  0775  3033               	movlw	51
  1653  0776  120A  118A  248B  120A  118A  	fcall	_lcd_data
  1654  077B                     l122:	
  1655                           ;main.c: 185:         while(RB4 == 1);
  1656                           
  1657  077B  1283               	bcf	3,5	;RP0=0, select bank0
  1658  077C  1303               	bcf	3,6	;RP1=0, select bank0
  1659  077D  1A06               	btfsc	6,4	;volatile
  1660  077E  2F80               	goto	u561
  1661  077F  2F81               	goto	u560
  1662  0780                     u561:
  1663  0780  2F7B               	goto	l122
  1664  0781                     u560:
  1665  0781                     l1169:
  1666                           
  1667                           ;main.c: 186:         currentPassword[passwordCurrentLength] = '3';
  1668  0781  3033               	movlw	51
  1669  0782  00F3               	movwf	??_keypad
  1670  0783  082C               	movf	_passwordCurrentLength,w
  1671  0784  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1672  0785  0084               	movwf	4
  1673  0786  0873               	movf	??_keypad,w
  1674  0787  1383               	bcf	3,7	;select IRP bank0
  1675  0788  0080               	movwf	0
  1676  0789                     l1171:
  1677                           
  1678                           ;main.c: 187:         passwordCurrentLength++;
  1679  0789  3001               	movlw	1
  1680  078A  07AC               	addwf	_passwordCurrentLength,f
  1681  078B  1803               	skipnc
  1682  078C  0AAD               	incf	_passwordCurrentLength+1,f
  1683  078D  3000               	movlw	0
  1684  078E  07AD               	addwf	_passwordCurrentLength+1,f
  1685  078F                     l1173:
  1686                           
  1687                           ;main.c: 189:     if(RB5 == 1)
  1688  078F  1E86               	btfss	6,5	;volatile
  1689  0790  2F92               	goto	u571
  1690  0791  2F93               	goto	u570
  1691  0792                     u571:
  1692  0792  2FAD               	goto	l1181
  1693  0793                     u570:
  1694  0793                     l1175:
  1695                           
  1696                           ;main.c: 190:     {;main.c: 191:         lcd_data('6');
  1697  0793  3036               	movlw	54
  1698  0794  120A  118A  248B  120A  118A  	fcall	_lcd_data
  1699  0799                     l126:	
  1700                           ;main.c: 192:         while(RB5 == 1);
  1701                           
  1702  0799  1283               	bcf	3,5	;RP0=0, select bank0
  1703  079A  1303               	bcf	3,6	;RP1=0, select bank0
  1704  079B  1A86               	btfsc	6,5	;volatile
  1705  079C  2F9E               	goto	u581
  1706  079D  2F9F               	goto	u580
  1707  079E                     u581:
  1708  079E  2F99               	goto	l126
  1709  079F                     u580:
  1710  079F                     l1177:
  1711                           
  1712                           ;main.c: 193:         currentPassword[passwordCurrentLength] = '6';
  1713  079F  3036               	movlw	54
  1714  07A0  00F3               	movwf	??_keypad
  1715  07A1  082C               	movf	_passwordCurrentLength,w
  1716  07A2  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1717  07A3  0084               	movwf	4
  1718  07A4  0873               	movf	??_keypad,w
  1719  07A5  1383               	bcf	3,7	;select IRP bank0
  1720  07A6  0080               	movwf	0
  1721  07A7                     l1179:
  1722                           
  1723                           ;main.c: 194:         passwordCurrentLength++;
  1724  07A7  3001               	movlw	1
  1725  07A8  07AC               	addwf	_passwordCurrentLength,f
  1726  07A9  1803               	skipnc
  1727  07AA  0AAD               	incf	_passwordCurrentLength+1,f
  1728  07AB  3000               	movlw	0
  1729  07AC  07AD               	addwf	_passwordCurrentLength+1,f
  1730  07AD                     l1181:
  1731                           
  1732                           ;main.c: 196:     if(RB6 == 1)
  1733  07AD  1F06               	btfss	6,6	;volatile
  1734  07AE  2FB0               	goto	u591
  1735  07AF  2FB1               	goto	u590
  1736  07B0                     u591:
  1737  07B0  2FCB               	goto	l1189
  1738  07B1                     u590:
  1739  07B1                     l1183:
  1740                           
  1741                           ;main.c: 197:     {;main.c: 198:         lcd_data('9');
  1742  07B1  3039               	movlw	57
  1743  07B2  120A  118A  248B  120A  118A  	fcall	_lcd_data
  1744  07B7                     l130:	
  1745                           ;main.c: 199:         while(RB6 == 1);
  1746                           
  1747  07B7  1283               	bcf	3,5	;RP0=0, select bank0
  1748  07B8  1303               	bcf	3,6	;RP1=0, select bank0
  1749  07B9  1B06               	btfsc	6,6	;volatile
  1750  07BA  2FBC               	goto	u601
  1751  07BB  2FBD               	goto	u600
  1752  07BC                     u601:
  1753  07BC  2FB7               	goto	l130
  1754  07BD                     u600:
  1755  07BD                     l1185:
  1756                           
  1757                           ;main.c: 200:         currentPassword[passwordCurrentLength] = '9';
  1758  07BD  3039               	movlw	57
  1759  07BE  00F3               	movwf	??_keypad
  1760  07BF  082C               	movf	_passwordCurrentLength,w
  1761  07C0  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1762  07C1  0084               	movwf	4
  1763  07C2  0873               	movf	??_keypad,w
  1764  07C3  1383               	bcf	3,7	;select IRP bank0
  1765  07C4  0080               	movwf	0
  1766  07C5                     l1187:
  1767                           
  1768                           ;main.c: 201:         passwordCurrentLength++;
  1769  07C5  3001               	movlw	1
  1770  07C6  07AC               	addwf	_passwordCurrentLength,f
  1771  07C7  1803               	skipnc
  1772  07C8  0AAD               	incf	_passwordCurrentLength+1,f
  1773  07C9  3000               	movlw	0
  1774  07CA  07AD               	addwf	_passwordCurrentLength+1,f
  1775  07CB                     l1189:
  1776                           
  1777                           ;main.c: 203:     if(RB7 == 1)
  1778  07CB  1F86               	btfss	6,7	;volatile
  1779  07CC  2FCE               	goto	u611
  1780  07CD  2FCF               	goto	u610
  1781  07CE                     u611:
  1782  07CE  2FE9               	goto	l137
  1783  07CF                     u610:
  1784  07CF                     l1191:
  1785                           
  1786                           ;main.c: 204:     {;main.c: 205:         lcd_data('#');
  1787  07CF  3023               	movlw	35
  1788  07D0  120A  118A  248B  120A  118A  	fcall	_lcd_data
  1789  07D5                     l134:	
  1790                           ;main.c: 206:         while(RB7 == 1);
  1791                           
  1792  07D5  1283               	bcf	3,5	;RP0=0, select bank0
  1793  07D6  1303               	bcf	3,6	;RP1=0, select bank0
  1794  07D7  1B86               	btfsc	6,7	;volatile
  1795  07D8  2FDA               	goto	u621
  1796  07D9  2FDB               	goto	u620
  1797  07DA                     u621:
  1798  07DA  2FD5               	goto	l134
  1799  07DB                     u620:
  1800  07DB                     l1193:
  1801                           
  1802                           ;main.c: 207:         currentPassword[passwordCurrentLength] = '#';
  1803  07DB  3023               	movlw	35
  1804  07DC  00F3               	movwf	??_keypad
  1805  07DD  082C               	movf	_passwordCurrentLength,w
  1806  07DE  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1807  07DF  0084               	movwf	4
  1808  07E0  0873               	movf	??_keypad,w
  1809  07E1  1383               	bcf	3,7	;select IRP bank0
  1810  07E2  0080               	movwf	0
  1811  07E3                     l1195:
  1812                           
  1813                           ;main.c: 208:         passwordCurrentLength++;
  1814  07E3  3001               	movlw	1
  1815  07E4  07AC               	addwf	_passwordCurrentLength,f
  1816  07E5  1803               	skipnc
  1817  07E6  0AAD               	incf	_passwordCurrentLength+1,f
  1818  07E7  3000               	movlw	0
  1819  07E8  07AD               	addwf	_passwordCurrentLength+1,f
  1820  07E9                     l137:
  1821  07E9  0008               	return
  1822  07EA                     __end_of_keypad:
  1823                           
  1824                           	psect	text8
  1825  048B                     __ptext8:	
  1826 ;; *************** function _lcd_data *****************
  1827 ;; Defined at:
  1828 ;;		line 96 in file "main.c"
  1829 ;; Parameters:    Size  Location     Type
  1830 ;;  data            1    wreg     unsigned char 
  1831 ;; Auto vars:     Size  Location     Type
  1832 ;;  data            1    2[COMMON] unsigned char 
  1833 ;; Return value:  Size  Location     Type
  1834 ;;                  1    wreg      void 
  1835 ;; Registers used:
  1836 ;;		wreg
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1842 ;;      Params:         0       0       0       0       0
  1843 ;;      Locals:         1       0       0       0       0
  1844 ;;      Temps:          2       0       0       0       0
  1845 ;;      Totals:         3       0       0       0       0
  1846 ;;Total ram usage:        3 bytes
  1847 ;; Hardware stack levels used: 1
  1848 ;; This function calls:
  1849 ;;		Nothing
  1850 ;; This function is called by:
  1851 ;;		_lcd_string
  1852 ;;		_keypad
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856  048B                     _lcd_data:	
  1857                           ;psect for function _lcd_data
  1858                           
  1859                           
  1860                           ;incstack = 0
  1861                           ; Regs used in _lcd_data: [wreg]
  1862                           ;lcd_data@data stored from wreg
  1863  048B  00F2               	movwf	lcd_data@data
  1864  048C                     l1011:
  1865                           
  1866                           ;main.c: 96: void lcd_data(unsigned char data);main.c: 97: {;main.c: 98:     PORTD = dat
      +                          a;
  1867  048C  0872               	movf	lcd_data@data,w
  1868  048D  1283               	bcf	3,5	;RP0=0, select bank0
  1869  048E  1303               	bcf	3,6	;RP1=0, select bank0
  1870  048F  0088               	movwf	8	;volatile
  1871  0490                     l1013:
  1872                           
  1873                           ;main.c: 99:     RC0 = 1;
  1874  0490  1407               	bsf	7,0	;volatile
  1875  0491                     l1015:
  1876                           
  1877                           ;main.c: 100:     RC1 = 0;
  1878  0491  1087               	bcf	7,1	;volatile
  1879  0492                     l1017:
  1880                           
  1881                           ;main.c: 101:     RC2 = 1;
  1882  0492  1507               	bsf	7,2	;volatile
  1883                           
  1884                           ;main.c: 103:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1885  0493  3007               	movlw	7
  1886  0494  00F1               	movwf	??_lcd_data+1
  1887  0495  307D               	movlw	125
  1888  0496  00F0               	movwf	??_lcd_data
  1889  0497                     u697:
  1890  0497  0BF0               	decfsz	??_lcd_data,f
  1891  0498  2C97               	goto	u697
  1892  0499  0BF1               	decfsz	??_lcd_data+1,f
  1893  049A  2C97               	goto	u697
  1894  049B                     l1019:
  1895                           
  1896                           ;main.c: 105:     RC2 = 0;
  1897  049B  1283               	bcf	3,5	;RP0=0, select bank0
  1898  049C  1303               	bcf	3,6	;RP1=0, select bank0
  1899  049D  1107               	bcf	7,2	;volatile
  1900  049E                     l80:
  1901  049E  0008               	return
  1902  049F                     __end_of_lcd_data:
  1903                           
  1904                           	psect	text9
  1905  04EE                     __ptext9:	
  1906 ;; *************** function _getSize *****************
  1907 ;; Defined at:
  1908 ;;		line 212 in file "main.c"
  1909 ;; Parameters:    Size  Location     Type
  1910 ;;  string          1    wreg     PTR unsigned char 
  1911 ;;		 -> defaultPassword(5), 
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;  string          1    4[COMMON] PTR unsigned char 
  1914 ;;		 -> defaultPassword(5), 
  1915 ;;  i               2    5[COMMON] int 
  1916 ;; Return value:  Size  Location     Type
  1917 ;;                  2    0[COMMON] int 
  1918 ;; Registers used:
  1919 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1920 ;; Tracked objects:
  1921 ;;		On entry : 0/0
  1922 ;;		On exit  : 0/0
  1923 ;;		Unchanged: 0/0
  1924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1925 ;;      Params:         2       0       0       0       0
  1926 ;;      Locals:         3       0       0       0       0
  1927 ;;      Temps:          2       0       0       0       0
  1928 ;;      Totals:         7       0       0       0       0
  1929 ;;Total ram usage:        7 bytes
  1930 ;; Hardware stack levels used: 1
  1931 ;; This function calls:
  1932 ;;		Nothing
  1933 ;; This function is called by:
  1934 ;;		_main
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           
  1938  04EE                     _getSize:	
  1939                           ;psect for function _getSize
  1940                           
  1941                           
  1942                           ;incstack = 0
  1943                           ; Regs used in _getSize: [wreg-fsr0h+status,2+status,0]
  1944                           ;getSize@string stored from wreg
  1945  04EE  00F4               	movwf	getSize@string
  1946  04EF                     l1047:
  1947                           
  1948                           ;main.c: 212: int getSize(unsigned char* string);main.c: 213: {;main.c: 214:     int i=0
      +                          ;
  1949  04EF  01F5               	clrf	getSize@i
  1950  04F0  01F6               	clrf	getSize@i+1
  1951                           
  1952                           ;main.c: 215:     for(i=0; i<string[i]!='\0'; i++);
  1953  04F1  01F5               	clrf	getSize@i
  1954  04F2  01F6               	clrf	getSize@i+1
  1955  04F3  2CFA               	goto	l1051
  1956  04F4                     l1049:
  1957  04F4  3001               	movlw	1
  1958  04F5  07F5               	addwf	getSize@i,f
  1959  04F6  1803               	skipnc
  1960  04F7  0AF6               	incf	getSize@i+1,f
  1961  04F8  3000               	movlw	0
  1962  04F9  07F6               	addwf	getSize@i+1,f
  1963  04FA                     l1051:
  1964  04FA  0875               	movf	getSize@i,w
  1965  04FB  0774               	addwf	getSize@string,w
  1966  04FC  00F2               	movwf	??_getSize
  1967  04FD  0872               	movf	??_getSize,w
  1968  04FE  0084               	movwf	4
  1969  04FF  0876               	movf	getSize@i+1,w
  1970  0500  3A80               	xorlw	128
  1971  0501  00F3               	movwf	??_getSize+1
  1972  0502  3080               	movlw	128
  1973  0503  0273               	subwf	??_getSize+1,w
  1974  0504  1D03               	skipz
  1975  0505  2D09               	goto	u345
  1976  0506  1383               	bcf	3,7	;select IRP bank0
  1977  0507  0800               	movf	0,w
  1978  0508  0275               	subwf	getSize@i,w
  1979  0509                     u345:
  1980  0509  1C03               	skipc
  1981  050A  2D0C               	goto	u341
  1982  050B  2D0D               	goto	u340
  1983  050C                     u341:
  1984  050C  2CF4               	goto	l1049
  1985  050D                     u340:
  1986  050D                     l1053:
  1987                           
  1988                           ;main.c: 217:     return i;
  1989  050D  0876               	movf	getSize@i+1,w
  1990  050E  00F1               	movwf	?_getSize+1
  1991  050F  0875               	movf	getSize@i,w
  1992  0510  00F0               	movwf	?_getSize
  1993  0511                     l143:
  1994  0511  0008               	return
  1995  0512                     __end_of_getSize:
  1996                           
  1997                           	psect	text10
  1998  053D                     __ptext10:	
  1999 ;; *************** function _checkPass *****************
  2000 ;; Defined at:
  2001 ;;		line 220 in file "main.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;		None
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;  i               2    1[COMMON] int 
  2006 ;; Return value:  Size  Location     Type
  2007 ;;                  1    wreg      _Bool 
  2008 ;; Registers used:
  2009 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2010 ;; Tracked objects:
  2011 ;;		On entry : 0/0
  2012 ;;		On exit  : 0/0
  2013 ;;		Unchanged: 0/0
  2014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2015 ;;      Params:         0       0       0       0       0
  2016 ;;      Locals:         2       0       0       0       0
  2017 ;;      Temps:          1       0       0       0       0
  2018 ;;      Totals:         3       0       0       0       0
  2019 ;;Total ram usage:        3 bytes
  2020 ;; Hardware stack levels used: 1
  2021 ;; This function calls:
  2022 ;;		Nothing
  2023 ;; This function is called by:
  2024 ;;		_main
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028  053D                     _checkPass:	
  2029                           ;psect for function _checkPass
  2030                           
  2031  053D                     l1057:	
  2032                           ;incstack = 0
  2033                           ; Regs used in _checkPass: [wreg-fsr0h+status,2+status,0]
  2034                           
  2035                           
  2036                           ;main.c: 222:     if(passwordCurrentLength == 0)
  2037  053D  1283               	bcf	3,5	;RP0=0, select bank0
  2038  053E  1303               	bcf	3,6	;RP1=0, select bank0
  2039  053F  082C               	movf	_passwordCurrentLength,w
  2040  0540  042D               	iorwf	_passwordCurrentLength+1,w
  2041  0541  1D03               	btfss	3,2
  2042  0542  2D44               	goto	u351
  2043  0543  2D45               	goto	u350
  2044  0544                     u351:
  2045  0544  2D47               	goto	l1063
  2046  0545                     u350:
  2047  0545                     l1059:
  2048                           
  2049                           ;main.c: 223:         return 0;
  2050  0545  3000               	movlw	0
  2051  0546  2D71               	goto	l147
  2052  0547                     l1063:
  2053                           
  2054                           ;main.c: 225:     for(int i=0; i<passwordMaxLength; i++)
  2055  0547  01F1               	clrf	checkPass@i
  2056  0548  01F2               	clrf	checkPass@i+1
  2057  0549  2D60               	goto	l148
  2058  054A                     l1065:
  2059                           
  2060                           ;main.c: 226:     {;main.c: 227:         if(currentPassword[i] != defaultPassword[i])
  2061  054A  0871               	movf	checkPass@i,w
  2062  054B  3E25               	addlw	(low (_defaultPassword| 0))& (0+255)
  2063  054C  0084               	movwf	4
  2064  054D  1383               	bcf	3,7	;select IRP bank0
  2065  054E  0800               	movf	0,w
  2066  054F  00F0               	movwf	??_checkPass
  2067  0550  0871               	movf	checkPass@i,w
  2068  0551  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  2069  0552  0084               	movwf	4
  2070  0553  0800               	movf	0,w
  2071  0554  0670               	xorwf	??_checkPass,w
  2072  0555  1903               	skipnz
  2073  0556  2D58               	goto	u361
  2074  0557  2D59               	goto	u360
  2075  0558                     u361:
  2076  0558  2D5A               	goto	l1071
  2077  0559                     u360:
  2078  0559  2D45               	goto	l1059
  2079  055A                     l1071:
  2080                           
  2081                           ;main.c: 229:     }
  2082  055A  3001               	movlw	1
  2083  055B  07F1               	addwf	checkPass@i,f
  2084  055C  1803               	skipnc
  2085  055D  0AF2               	incf	checkPass@i+1,f
  2086  055E  3000               	movlw	0
  2087  055F  07F2               	addwf	checkPass@i+1,f
  2088  0560                     l148:
  2089  0560  0872               	movf	checkPass@i+1,w
  2090  0561  3A80               	xorlw	128
  2091  0562  00F0               	movwf	??_checkPass
  2092  0563  1283               	bcf	3,5	;RP0=0, select bank0
  2093  0564  1303               	bcf	3,6	;RP1=0, select bank0
  2094  0565  082B               	movf	_passwordMaxLength+1,w
  2095  0566  3A80               	xorlw	128
  2096  0567  0270               	subwf	??_checkPass,w
  2097  0568  1D03               	skipz
  2098  0569  2D6C               	goto	u375
  2099  056A  082A               	movf	_passwordMaxLength,w
  2100  056B  0271               	subwf	checkPass@i,w
  2101  056C                     u375:
  2102  056C  1C03               	skipc
  2103  056D  2D6F               	goto	u371
  2104  056E  2D70               	goto	u370
  2105  056F                     u371:
  2106  056F  2D4A               	goto	l1065
  2107  0570                     u370:
  2108  0570                     l1073:
  2109                           
  2110                           ;main.c: 230:     return 1;
  2111  0570  3001               	movlw	1
  2112  0571                     l147:
  2113  0571  0008               	return
  2114  0572                     __end_of_checkPass:
  2115  007E                     btemp	set	126	;btemp
  2116  007E                     wtemp0	set	126
  2117                           
  2118                           	psect	idloc
  2119                           
  2120                           ;Config register IDLOC0 @ 0x2000
  2121                           ;	unspecified, using default values
  2122  2000                     	org	8192
  2123  2000  3FFF               	dw	16383
  2124                           
  2125                           ;Config register IDLOC1 @ 0x2001
  2126                           ;	unspecified, using default values
  2127  2001                     	org	8193
  2128  2001  3FFF               	dw	16383
  2129                           
  2130                           ;Config register IDLOC2 @ 0x2002
  2131                           ;	unspecified, using default values
  2132  2002                     	org	8194
  2133  2002  3FFF               	dw	16383
  2134                           
  2135                           ;Config register IDLOC3 @ 0x2003
  2136                           ;	unspecified, using default values
  2137  2003                     	org	8195
  2138  2003  3FFF               	dw	16383
  2139                           
  2140                           	psect	config
  2141                           
  2142                           ;Config register CONFIG @ 0x2007
  2143                           ;	Oscillator Selection bits
  2144                           ;	FOSC = 0x3, unprogrammed default
  2145                           ;	Watchdog Timer Enable bit
  2146                           ;	WDTE = OFF, WDT disabled
  2147                           ;	Power-up Timer Enable bit
  2148                           ;	PWRTE = 0x1, unprogrammed default
  2149                           ;	Brown-out Reset Enable bit
  2150                           ;	BOREN = 0x1, unprogrammed default
  2151                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2152                           ;	LVP = 0x1, unprogrammed default
  2153                           ;	Data EEPROM Memory Code Protection bit
  2154                           ;	CPD = 0x1, unprogrammed default
  2155                           ;	Flash Program Memory Write Enable bits
  2156                           ;	WRT = 0x3, unprogrammed default
  2157                           ;	In-Circuit Debugger Mode bit
  2158                           ;	DEBUG = 0x1, unprogrammed default
  2159                           ;	Flash Program Memory Code Protection bit
  2160                           ;	CP = 0x1, unprogrammed default
  2161  2007                     	org	8199
  2162  2007  3FFB               	dw	16379

Data Sizes:
    Strings     59
    Constant    0
    Data        10
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      3      17
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    getSize@string	PTR unsigned char  size(1) Largest target is 5
		 -> defaultPassword(BANK0[5]), 

    lcd_string@string	PTR unsigned char  size(1) Largest target is 16
		 -> STR_7(CODE[6]), STR_6(CODE[16]), STR_5(CODE[13]), STR_4(CODE[6]), 
		 -> STR_3(CODE[16]), STR_2(CODE[12]), STR_1(CODE[12]), 


Critical Paths under _main in COMMON

    _main->_resetLock
    _tryAgain->_lcd_string
    _resetLock->_lock_init
    _lock_init->_lcd_string
    _lcd_string->_lcd_data
    _lcd_init->_lcd_instruction
    _keypad->_lcd_data

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3936
                                              0 BANK0      3     3      0
                          _checkPass
                            _getSize
                             _keypad
                           _lcd_init
                    _lcd_instruction
                         _lcd_string
                          _lock_init
                          _resetLock
                           _tryAgain
 ---------------------------------------------------------------------------------
 (1) _tryAgain                                             3     3      0     919
                                              8 COMMON     3     3      0
                           _lcd_init
                    _lcd_instruction
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _resetLock                                            3     3      0     965
                                             11 COMMON     3     3      0
                          _lock_init
 ---------------------------------------------------------------------------------
 (2) _lock_init                                            3     3      0     919
                                              8 COMMON     3     3      0
                           _lcd_init
                    _lcd_instruction
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _lcd_string                                           5     3      2     875
                                              3 COMMON     5     3      2
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             0     0      0      22
                    _lcd_instruction
 ---------------------------------------------------------------------------------
 (2) _lcd_instruction                                      3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keypad                                               1     1      0      22
                                              3 COMMON     1     1      0
                           _lcd_data
 ---------------------------------------------------------------------------------
 (3) _lcd_data                                             3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _getSize                                              7     5      2     124
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _checkPass                                            3     3      0      68
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _checkPass
   _getSize
   _keypad
     _lcd_data
   _lcd_init
     _lcd_instruction
   _lcd_instruction
   _lcd_string
     _lcd_data
   _lock_init
     _lcd_init
     _lcd_instruction
     _lcd_string
   _resetLock
     _lock_init
   _tryAgain
     _lcd_init
     _lcd_instruction
     _lcd_string

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      3      11       5       21.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      1F      12        0.0%
ABS                  0      0      1F       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Tue Apr 25 20:17:10 2023

                      pc 0002             lcd_data@data 0072                       l80 049E  
                     l90 0685                       l74 04CB                       l77 04B2  
                     l94 06A3                       l86 04ED                       l98 06C1  
                     fsr 0004                      l110 071E                      l102 06DF  
                    l130 07B7                      l122 077B                      l114 073C  
                    l106 0700                      l134 07D5                      l126 0799  
                    l118 075A                      l143 0511                      l160 05B9  
                    l137 07E9                      l147 0571                      l163 0601  
                    l148 0560                      l157 053C                      _RB0 0030  
                    _RB1 0031                      _RC0 0038                      _RB2 0032  
                    _RC1 0039                      _RC2 003A                      _RB4 0034  
                    _RB5 0035                      _RB6 0036                      _RB7 0037  
                    u400 068B                      u401 068A                      u410 069D  
                    u330 04ED                      u411 069C                      u331 04EC  
                    u340 050D                      u500 0724                      u420 06A9  
                    u341 050C                      u501 0723                      u421 06A8  
                    u350 0545                      u510 0736                      u430 06BB  
                    u351 0544                      u511 0735                      u431 06BA  
                    u335 04E9                      u360 0559                      u600 07BD  
                    u520 0742                      u440 06C7                      u361 0558  
                    u345 0509                      u601 07BC                      u521 0741  
                    u441 06C6                      u370 0570                      u610 07CF  
                    u530 0754                      u450 06D9                      u371 056F  
                    u611 07CE                      u531 0753                      u451 06D8  
                    u620 07DB                      u540 0760                      u460 06E5  
                    u380 053C                      u621 07DA                      u541 075F  
                    u461 06E4                      u381 053B                      u550 0775  
                    u470 06FA                      u390 067F                      u630 0624  
                    u375 056C                      u551 0774                      u471 06F9  
                    u391 067E                      u631 0623                      u560 0781  
                    u480 0706                      u640 0669                      u561 0780  
                    u481 0705                      u385 0538                      u641 0668  
                    u570 0793                      u490 0718                      u571 0792  
                    u491 0717                      u580 079F                      u581 079E  
                    u645 0665                      u590 07B1                      u591 07B0  
                    u657 0645                      u667 05D5                      u677 058D  
                    u687 04AB                      u697 0497                      fsr0 0004  
                    indf 0000         ?_lcd_instruction 0070                     l1001 04A0  
                   l1011 048C                     l1003 04A4                     l1013 0490  
                   l1101 06A9                     l1005 04A5                     l1021 04B3  
                   l1015 0491                     l1111 06CF                     l1103 06B1  
                   l1007 04A6                     l1023 04CD                     l1031 0572  
                   l1017 0492                     l1121 06F3                     l1113 06D5  
                   l1105 06B7                     l1009 04AF                     l1025 04D0  
                   l1041 059F                     l1033 057D                     l1201 05CF  
                   l1051 04FA                     l1019 049B                     l1131 0706  
                   l1123 06F4                     l1115 06D9                     l1107 06BB  
                   l1027 04DD                     l1043 05A9                     l1035 0587  
                   l1211 05F7                     l1203 05DC                     l1053 050D  
                   l1141 072C                     l1133 070E                     l1125 06F5  
                   l1117 06E5                     l1109 06C7                     l1029 04E3  
                   l1045 05AF                     l1037 0594                     l1205 05E1  
                   l1221 0609                     l1213 0602                     l1071 055A  
                   l1063 0547                     l1047 04EF                     l1151 0750  
                   l1143 0732                     l1135 0714                     l1127 06F6  
                   l1119 06ED                     l1039 0599                     l1207 05E7  
                   l1231 0639                     l1223 060E                     l1215 0605  
                   l1073 0570                     l1065 054A                     l1057 053D  
                   l1049 04F4                     l1161 076F                     l1153 0754  
                   l1145 0736                     l1137 0718                     l1129 06FA  
                   l1081 051B                     l1209 05F1                     l1241 0659  
                   l1233 063D                     l1225 061A                     l1217 0607  
                   l1059 0545                     l1171 0789                     l1163 0770  
                   l1155 0760                     l1147 0742                     l1139 0724  
                   l1091 067F                     l1083 051E                     l1243 0669  
                   l1235 064B                     l1227 0624                     l1219 0608  
                   l1181 07AD                     l1173 078F                     l1165 0771  
                   l1157 0768                     l1149 074A                     l1093 068B  
                   l1085 0526                     l1077 0512                     l1245 066D  
                   l1237 064E                     l1229 062F                     l1191 07CF  
                   l1183 07B1                     l1175 0793                     l1167 0775  
                   l1159 076E                     l1095 0693                     l1087 052C  
                   l1079 0516                     l1239 0654                     l1193 07DB  
                   l1185 07BD                     l1177 079F                     l1169 0781  
                   l1097 0699                     l1089 0676                     l1195 07E3  
                   l1187 07C5                     l1179 07A7                     l1099 069D  
                   l1189 07CB                     l1197 05BA                     l1199 05C5  
                   STR_1 0026                     STR_2 0032                     STR_3 0009  
                   STR_4 003E                     STR_5 0019                     STR_6 0009  
                   STR_7 003E                     _main 0602                     btemp 007E  
                   start 0000              lcd_string@i 0075                    ?_main 0070  
                  _PORTA 0005                    _PORTD 0008                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    _TRISD 0088  
        __end_of_getSize 0512                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07EA             __end_of_main 0676  
                 ??_main 002E          _defaultPassword 0025         __end_of_lcd_data 049F  
       __end_of_lcd_init 04CC                   _keypad 0676                ??_getSize 0072  
        _currentPassword 0020         __end_of_tryAgain 0602  __end_of__initialization 07FC  
         __pcstackCOMMON 0070             __pidataBANK0 046E               __pbssBANK0 002A  
             __pmaintext 0602      lcd_instruction@data 0072                  ?_keypad 0070  
              ?_lcd_data 0070               _lcd_string 04CC                ?_lcd_init 0070  
      __end_of_checkPass 0572               __stringtab 0003               checkPass@i 0071  
              ?_tryAgain 0070                  __ptext1 05BA                  __ptext2 0512  
                __ptext3 0572                  __ptext4 04CC                  __ptext5 04B3  
                __ptext6 049F                  __ptext7 0676                  __ptext8 048B  
                __ptext9 04EE                  _getSize 04EE        __end_of_lock_init 05BA  
             ??_lcd_data 0070               ??_lcd_init 0073     end_of_initialization 07FC  
      __end_of_resetLock 053D               ??_tryAgain 0078           lcd_string@size 0073  
            ?_lcd_string 0073        ??_lcd_instruction 0070           __end_of_keypad 07EA  
    start_initialization 07EA               init_fetch0 0478              __pdataBANK0 0020  
               ??_keypad 0073                ___latbits 0002            __pcstackBANK0 002E  
              _checkPass 053D                __pstrings 0003                 ?_getSize 0070  
             resetLock@i 007C                _lock_init 0572               ?_checkPass 0070  
              _resetLock 0512              __stringbase 0008    _passwordCurrentLength 002C  
           ??_lcd_string 0075               ?_lock_init 0070          _lcd_instruction 049F  
      _passwordMaxLength 002A               ?_resetLock 0070       __end_of_lcd_string 04EE  
     __end_of__stringtab 0009                 __ptext10 053D                 _lcd_data 048B  
               _lcd_init 04B3              ??_checkPass 0070                 getSize@i 0075  
               _tryAgain 05BA  __end_of_lcd_instruction 04B3                 init_ram0 047C  
            ??_lock_init 0078            getSize@string 0074                stringcode 0003  
            ??_resetLock 007B                 stringdir 0003                 stringtab 0003  
       lcd_string@string 0077  
