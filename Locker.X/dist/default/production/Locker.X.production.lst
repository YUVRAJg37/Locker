

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon Apr 24 23:36:02 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Version 2.40
    28                           ; Generated 17/11/2021 GMT
    29                           ; 
    30                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution. Publication is not required when
    44                           ;        this file is used in an embedded application.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F877A Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  000E                     	;# 
    78  000F                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0014                     	;# 
    84  0015                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001B                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001D                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  0081                     	;# 
    98  0085                     	;# 
    99  0086                     	;# 
   100  0087                     	;# 
   101  0088                     	;# 
   102  0089                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  018C                     	;# 
   121  018D                     	;# 
   122  0000                     	;# 
   123  0001                     	;# 
   124  0002                     	;# 
   125  0003                     	;# 
   126  0004                     	;# 
   127  0005                     	;# 
   128  0006                     	;# 
   129  0007                     	;# 
   130  0008                     	;# 
   131  0009                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000D                     	;# 
   136  000E                     	;# 
   137  000E                     	;# 
   138  000F                     	;# 
   139  0010                     	;# 
   140  0011                     	;# 
   141  0012                     	;# 
   142  0013                     	;# 
   143  0014                     	;# 
   144  0015                     	;# 
   145  0015                     	;# 
   146  0016                     	;# 
   147  0017                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001B                     	;# 
   152  001B                     	;# 
   153  001C                     	;# 
   154  001D                     	;# 
   155  001E                     	;# 
   156  001F                     	;# 
   157  0081                     	;# 
   158  0085                     	;# 
   159  0086                     	;# 
   160  0087                     	;# 
   161  0088                     	;# 
   162  0089                     	;# 
   163  008C                     	;# 
   164  008D                     	;# 
   165  008E                     	;# 
   166  0091                     	;# 
   167  0092                     	;# 
   168  0093                     	;# 
   169  0094                     	;# 
   170  0098                     	;# 
   171  0099                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  009F                     	;# 
   176  010C                     	;# 
   177  010D                     	;# 
   178  010E                     	;# 
   179  010F                     	;# 
   180  018C                     	;# 
   181  018D                     	;# 
   182                           
   183                           	psect	idataBANK0
   184  0476                     __pidataBANK0:
   185                           
   186                           ;initializer for _currentPassword
   187  0476  3430               	retlw	48
   188  0477  3430               	retlw	48
   189  0478  3430               	retlw	48
   190  0479  3430               	retlw	48
   191  047A  3400               	retlw	0
   192                           
   193                           ;initializer for _defaultPassword
   194  047B  3431               	retlw	49
   195  047C  3432               	retlw	50
   196  047D  3433               	retlw	51
   197  047E  3434               	retlw	52
   198  047F  3400               	retlw	0
   199  0008                     _PORTD	set	8
   200  0037                     _RB7	set	55
   201  0036                     _RB6	set	54
   202  0035                     _RB5	set	53
   203  0034                     _RB4	set	52
   204  0032                     _RB2	set	50
   205  0031                     _RB1	set	49
   206  0030                     _RB0	set	48
   207  003A                     _RC2	set	58
   208  0039                     _RC1	set	57
   209  0038                     _RC0	set	56
   210  0086                     _TRISB	set	134
   211  0088                     _TRISD	set	136
   212  0087                     _TRISC	set	135
   213                           
   214                           	psect	strings
   215  0003                     __pstrings:
   216  0003                     stringtab:
   217  0003                     __stringtab:
   218  0003                     stringcode:	
   219                           ;	String table - string pointers are 1 byte each
   220                           
   221  0003                     stringdir:
   222  0003  3000               	movlw	high stringdir
   223  0004  008A               	movwf	10
   224  0005  0804               	movf	4,w
   225  0006  0A84               	incf	4,f
   226  0007  0782               	addwf	2,f
   227  0008                     __stringbase:
   228  0008  3400               	retlw	0
   229  0009                     __end_of__stringtab:
   230  0009                     STR_3:
   231  0009  3420               	retlw	32	;' '
   232  000A  3445               	retlw	69	;'E'
   233  000B  346E               	retlw	110	;'n'
   234  000C  3474               	retlw	116	;'t'
   235  000D  3465               	retlw	101	;'e'
   236  000E  3472               	retlw	114	;'r'
   237  000F  3420               	retlw	32	;' '
   238  0010  3450               	retlw	80	;'P'
   239  0011  3461               	retlw	97	;'a'
   240  0012  3473               	retlw	115	;'s'
   241  0013  3473               	retlw	115	;'s'
   242  0014  3477               	retlw	119	;'w'
   243  0015  346F               	retlw	111	;'o'
   244  0016  3472               	retlw	114	;'r'
   245  0017  3464               	retlw	100	;'d'
   246  0018  3400               	retlw	0
   247  0019                     STR_5:
   248  0019  3420               	retlw	32	;' '
   249  001A  3420               	retlw	32	;' '
   250  001B  3420               	retlw	32	;' '
   251  001C  3454               	retlw	84	;'T'
   252  001D  3452               	retlw	82	;'R'
   253  001E  3459               	retlw	89	;'Y'
   254  001F  3420               	retlw	32	;' '
   255  0020  3441               	retlw	65	;'A'
   256  0021  3447               	retlw	71	;'G'
   257  0022  3441               	retlw	65	;'A'
   258  0023  3449               	retlw	73	;'I'
   259  0024  344E               	retlw	78	;'N'
   260  0025  3400               	retlw	0
   261  0026                     STR_1:
   262  0026  3420               	retlw	32	;' '
   263  0027  3420               	retlw	32	;' '
   264  0028  3420               	retlw	32	;' '
   265  0029  3455               	retlw	85	;'U'
   266  002A  344E               	retlw	78	;'N'
   267  002B  344C               	retlw	76	;'L'
   268  002C  344F               	retlw	79	;'O'
   269  002D  3443               	retlw	67	;'C'
   270  002E  344B               	retlw	75	;'K'
   271  002F  3445               	retlw	69	;'E'
   272  0030  3444               	retlw	68	;'D'
   273  0031  3400               	retlw	0
   274  0032                     STR_2:
   275  0032  3420               	retlw	32	;' '
   276  0033  3420               	retlw	32	;' '
   277  0034  3420               	retlw	32	;' '
   278  0035  3420               	retlw	32	;' '
   279  0036  3457               	retlw	87	;'W'
   280  0037  3465               	retlw	101	;'e'
   281  0038  346C               	retlw	108	;'l'
   282  0039  3463               	retlw	99	;'c'
   283  003A  346F               	retlw	111	;'o'
   284  003B  346D               	retlw	109	;'m'
   285  003C  3465               	retlw	101	;'e'
   286  003D  3400               	retlw	0
   287  003E                     STR_4:
   288  003E  3420               	retlw	32	;' '
   289  003F  3420               	retlw	32	;' '
   290  0040  3420               	retlw	32	;' '
   291  0041  3420               	retlw	32	;' '
   292  0042  3420               	retlw	32	;' '
   293  0043  3400               	retlw	0
   294  003E                     
   295                           	psect	cinit
   296  07EA                     start_initialization:	
   297                           ; #config settings
   298                           
   299  07EA                     __initialization:
   300                           
   301                           ; Initialize objects allocated to BANK0
   302  07EA  1383               	bcf	3,7	;select IRP bank0
   303  07EB  302A               	movlw	low (__pdataBANK0+10)
   304  07EC  00FD               	movwf	btemp+-1
   305  07ED  3004               	movlw	high __pidataBANK0
   306  07EE  00FE               	movwf	btemp
   307  07EF  3076               	movlw	low __pidataBANK0
   308  07F0  00FF               	movwf	btemp+1
   309  07F1  3020               	movlw	low __pdataBANK0
   310  07F2  0084               	movwf	4
   311  07F3  120A  118A  2484  120A  118A  	fcall	init_ram0
   312                           
   313                           ; Clear objects allocated to BANK0
   314  07F8  01AA               	clrf	__pbssBANK0& (0+127)
   315  07F9  01AB               	clrf	(__pbssBANK0+1)& (0+127)
   316  07FA  01AC               	clrf	(__pbssBANK0+2)& (0+127)
   317  07FB  01AD               	clrf	(__pbssBANK0+3)& (0+127)
   318  07FC                     end_of_initialization:	
   319                           ;End of C runtime variable initialization code
   320                           
   321  07FC                     __end_of__initialization:
   322  07FC  0183               	clrf	3
   323  07FD  120A  118A  2E0A   	ljmp	_main	;jump to C main() function
   324                           
   325                           	psect	bssBANK0
   326  002A                     __pbssBANK0:
   327  002A                     _passwordMaxLength:
   328  002A                     	ds	2
   329  002C                     _passwordLength:
   330  002C                     	ds	2
   331                           
   332                           	psect	dataBANK0
   333  0020                     __pdataBANK0:
   334  0020                     _currentPassword:
   335  0020                     	ds	5
   336  0025                     _defaultPassword:
   337  0025                     	ds	5
   338                           
   339                           	psect	inittext
   340  0480                     init_fetch0:	
   341                           ;	Called with low address in FSR and high address in W
   342                           
   343  0480  087E               	movf	btemp,w
   344  0481  008A               	movwf	10
   345  0482  087F               	movf	btemp+1,w
   346  0483  0082               	movwf	2
   347  0484                     init_ram0:	
   348                           ;Called with:
   349                           ;	high address of idata address in btemp 
   350                           ;	low address of idata address in btemp+1 
   351                           ;	low address of data in FSR
   352                           ;	high address + 1 of data in btemp-1
   353                           
   354  0484  120A  118A  2480  120A  118A  	fcall	init_fetch0
   355  0489  0080               	movwf	0
   356  048A  0A84               	incf	4,f
   357  048B  0804               	movf	4,w
   358  048C  067D               	xorwf	btemp+-1,w
   359  048D  1903               	btfsc	3,2
   360  048E  3400               	retlw	0
   361  048F  0AFF               	incf	btemp+1,f
   362  0490  1903               	btfsc	3,2
   363  0491  0AFE               	incf	btemp,f
   364  0492  2C84               	goto	init_ram0
   365                           
   366                           	psect	cstackCOMMON
   367  0070                     __pcstackCOMMON:
   368  0070                     ?_lock_init:
   369  0070                     ?_checkPass:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ??_checkPass:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_lcd_init:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?_lcd_instruction:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ??_lcd_instruction:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ?_resetLock:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_keypad:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ?_tryAgain:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_main:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ?_lcd_data:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ??_lcd_data:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?_getSize:	
   403                           ; 1 bytes @ 0x0
   404                           
   405                           
   406                           ; 2 bytes @ 0x0
   407  0070                     	ds	1
   408  0071                     checkPass@i:
   409                           
   410                           ; 2 bytes @ 0x1
   411  0071                     	ds	1
   412  0072                     ??_getSize:
   413  0072                     lcd_instruction@data:	
   414                           ; 1 bytes @ 0x2
   415                           
   416  0072                     lcd_data@data:	
   417                           ; 1 bytes @ 0x2
   418                           
   419                           
   420                           ; 1 bytes @ 0x2
   421  0072                     	ds	1
   422  0073                     ??_lcd_init:
   423  0073                     ?_lcd_string:	
   424                           ; 1 bytes @ 0x3
   425                           
   426  0073                     ??_keypad:	
   427                           ; 1 bytes @ 0x3
   428                           
   429  0073                     lcd_string@size:	
   430                           ; 1 bytes @ 0x3
   431                           
   432                           
   433                           ; 2 bytes @ 0x3
   434  0073                     	ds	1
   435  0074                     getSize@string:
   436                           
   437                           ; 1 bytes @ 0x4
   438  0074                     	ds	1
   439  0075                     ??_lcd_string:
   440  0075                     lcd_string@i:	
   441                           ; 1 bytes @ 0x5
   442                           
   443  0075                     getSize@i:	
   444                           ; 2 bytes @ 0x5
   445                           
   446                           
   447                           ; 2 bytes @ 0x5
   448  0075                     	ds	2
   449  0077                     lcd_string@string:
   450                           
   451                           ; 1 bytes @ 0x7
   452  0077                     	ds	1
   453  0078                     ??_lock_init:
   454  0078                     ??_tryAgain:	
   455                           ; 1 bytes @ 0x8
   456                           
   457                           
   458                           ; 1 bytes @ 0x8
   459  0078                     	ds	3
   460  007B                     ??_resetLock:
   461                           
   462                           ; 1 bytes @ 0xB
   463  007B                     	ds	1
   464  007C                     resetLock@i:
   465                           
   466                           ; 2 bytes @ 0xC
   467  007C                     	ds	2
   468                           
   469                           	psect	cstackBANK0
   470  002E                     __pcstackBANK0:
   471  002E                     ??_main:
   472                           
   473                           ; 1 bytes @ 0x0
   474  002E                     	ds	3
   475                           
   476                           	psect	maintext
   477  060A                     __pmaintext:	
   478 ;;
   479 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   480 ;;
   481 ;; *************** function _main *****************
   482 ;; Defined at:
   483 ;;		line 36 in file "main.c"
   484 ;; Parameters:    Size  Location     Type
   485 ;;		None
   486 ;; Auto vars:     Size  Location     Type
   487 ;;		None
   488 ;; Return value:  Size  Location     Type
   489 ;;                  1    wreg      void 
   490 ;; Registers used:
   491 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   492 ;; Tracked objects:
   493 ;;		On entry : B00/0
   494 ;;		On exit  : 0/0
   495 ;;		Unchanged: 0/0
   496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   497 ;;      Params:         0       0       0       0       0
   498 ;;      Locals:         0       0       0       0       0
   499 ;;      Temps:          0       3       0       0       0
   500 ;;      Totals:         0       3       0       0       0
   501 ;;Total ram usage:        3 bytes
   502 ;; Hardware stack levels required when called: 4
   503 ;; This function calls:
   504 ;;		_checkPass
   505 ;;		_getSize
   506 ;;		_keypad
   507 ;;		_lcd_init
   508 ;;		_lcd_instruction
   509 ;;		_lcd_string
   510 ;;		_lock_init
   511 ;;		_resetLock
   512 ;;		_tryAgain
   513 ;; This function is called by:
   514 ;;		Startup code after reset
   515 ;; This function uses a non-reentrant model
   516 ;;
   517                           
   518  060A                     _main:	
   519                           ;psect for function _main
   520                           
   521  060A                     l1201:	
   522                           ;incstack = 0
   523                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   524                           
   525                           
   526                           ;main.c: 38:     TRISC = 0;
   527  060A  1683               	bsf	3,5	;RP0=1, select bank1
   528  060B  1303               	bcf	3,6	;RP1=0, select bank1
   529  060C  0187               	clrf	7	;volatile
   530                           
   531                           ;main.c: 39:     TRISD = 0;
   532  060D  0188               	clrf	8	;volatile
   533  060E                     l1203:
   534                           
   535                           ;main.c: 40:     TRISB = 0xF0;
   536  060E  30F0               	movlw	240
   537  060F  0086               	movwf	6	;volatile
   538  0610                     l1205:
   539                           
   540                           ;main.c: 42:     lock_init();
   541  0610  120A  118A  257A  120A  118A  	fcall	_lock_init
   542  0615                     l1207:
   543                           
   544                           ;main.c: 44:     passwordMaxLength = getSize(&defaultPassword);
   545  0615  3025               	movlw	(low (_defaultPassword| 0))& (0+255)
   546  0616  120A  118A  24F6  120A  118A  	fcall	_getSize
   547  061B  0871               	movf	?_getSize+1,w
   548  061C  1283               	bcf	3,5	;RP0=0, select bank0
   549  061D  1303               	bcf	3,6	;RP1=0, select bank0
   550  061E  00AB               	movwf	_passwordMaxLength+1
   551  061F  0870               	movf	?_getSize,w
   552  0620  00AA               	movwf	_passwordMaxLength
   553  0621                     l1209:
   554                           
   555                           ;main.c: 47:     {;main.c: 48:         if(checkPass())
   556  0621  120A  118A  2545  120A  118A  	fcall	_checkPass
   557  0626  3A00               	xorlw	0
   558  0627  1903               	skipnz
   559  0628  2E2A               	goto	u631
   560  0629  2E2B               	goto	u630
   561  062A                     u631:
   562  062A  2E54               	goto	l1219
   563  062B                     u630:
   564  062B                     l1211:
   565                           
   566                           ;main.c: 49:         {;main.c: 50:             lcd_init();
   567  062B  120A  118A  24BB  120A  118A  	fcall	_lcd_init
   568                           
   569                           ;main.c: 51:             lcd_instruction(0x80);
   570  0630  3080               	movlw	128
   571  0631  120A  118A  24A7  120A  118A  	fcall	_lcd_instruction
   572  0636                     l1213:
   573                           
   574                           ;main.c: 52:             lcd_string("   UNLOCKED", 11);
   575  0636  300B               	movlw	11
   576  0637  00F3               	movwf	lcd_string@size
   577  0638  3000               	movlw	0
   578  0639  00F4               	movwf	lcd_string@size+1
   579  063A  301E               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   580  063B  120A  118A  24D4  120A  118A  	fcall	_lcd_string
   581  0640                     l1215:
   582                           
   583                           ;main.c: 54:             _delay((unsigned long)((10000)*(4000000/4000.0)));
   584  0640  3033               	movlw	51
   585  0641  1283               	bcf	3,5	;RP0=0, select bank0
   586  0642  1303               	bcf	3,6	;RP1=0, select bank0
   587  0643  00B0               	movwf	??_main+2
   588  0644  30BB               	movlw	187
   589  0645  00AF               	movwf	??_main+1
   590  0646  30DF               	movlw	223
   591  0647  00AE               	movwf	??_main
   592  0648                     u657:
   593  0648  0BAE               	decfsz	??_main,f
   594  0649  2E48               	goto	u657
   595  064A  0BAF               	decfsz	??_main+1,f
   596  064B  2E48               	goto	u657
   597  064C  0BB0               	decfsz	??_main+2,f
   598  064D  2E48               	goto	u657
   599  064E                     l1217:
   600                           
   601                           ;main.c: 56:             resetLock();
   602  064E  120A  118A  251A  120A  118A  	fcall	_resetLock
   603                           
   604                           ;main.c: 57:         }
   605  0653  2E21               	goto	l1209
   606  0654                     l1219:
   607                           
   608                           ;main.c: 59:         {;main.c: 60:             keypad();
   609  0654  120A  118A  2676  120A  118A  	fcall	_keypad
   610  0659                     l1221:
   611                           
   612                           ;main.c: 61:             if(passwordLength > passwordMaxLength)
   613  0659  1283               	bcf	3,5	;RP0=0, select bank0
   614  065A  1303               	bcf	3,6	;RP1=0, select bank0
   615  065B  082B               	movf	_passwordMaxLength+1,w
   616  065C  3A80               	xorlw	128
   617  065D  00AE               	movwf	??_main
   618  065E  082D               	movf	_passwordLength+1,w
   619  065F  3A80               	xorlw	128
   620  0660  022E               	subwf	??_main,w
   621  0661  1D03               	skipz
   622  0662  2E65               	goto	u645
   623  0663  082C               	movf	_passwordLength,w
   624  0664  022A               	subwf	_passwordMaxLength,w
   625  0665                     u645:
   626  0665  1803               	skipnc
   627  0666  2E68               	goto	u641
   628  0667  2E69               	goto	u640
   629  0668                     u641:
   630  0668  2E21               	goto	l1209
   631  0669                     u640:
   632  0669                     l1223:
   633                           
   634                           ;main.c: 62:             {;main.c: 63:                 passwordLength = 0;
   635  0669  1283               	bcf	3,5	;RP0=0, select bank0
   636  066A  1303               	bcf	3,6	;RP1=0, select bank0
   637  066B  01AC               	clrf	_passwordLength
   638  066C  01AD               	clrf	_passwordLength+1
   639  066D                     l1225:
   640                           
   641                           ;main.c: 64:                 tryAgain();
   642  066D  120A  118A  25C2  120A  118A  	fcall	_tryAgain
   643  0672  2E21               	goto	l1209
   644  0673  120A  118A  2800   	ljmp	start
   645  0676                     __end_of_main:
   646                           
   647                           	psect	text1
   648  05C2                     __ptext1:	
   649 ;; *************** function _tryAgain *****************
   650 ;; Defined at:
   651 ;;		line 255 in file "main.c"
   652 ;; Parameters:    Size  Location     Type
   653 ;;		None
   654 ;; Auto vars:     Size  Location     Type
   655 ;;		None
   656 ;; Return value:  Size  Location     Type
   657 ;;                  1    wreg      void 
   658 ;; Registers used:
   659 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   660 ;; Tracked objects:
   661 ;;		On entry : 0/0
   662 ;;		On exit  : 0/0
   663 ;;		Unchanged: 0/0
   664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   665 ;;      Params:         0       0       0       0       0
   666 ;;      Locals:         0       0       0       0       0
   667 ;;      Temps:          3       0       0       0       0
   668 ;;      Totals:         3       0       0       0       0
   669 ;;Total ram usage:        3 bytes
   670 ;; Hardware stack levels used: 1
   671 ;; Hardware stack levels required when called: 2
   672 ;; This function calls:
   673 ;;		_lcd_init
   674 ;;		_lcd_instruction
   675 ;;		_lcd_string
   676 ;; This function is called by:
   677 ;;		_main
   678 ;; This function uses a non-reentrant model
   679 ;;
   680                           
   681  05C2                     _tryAgain:	
   682                           ;psect for function _tryAgain
   683                           
   684  05C2                     l1185:	
   685                           ;incstack = 0
   686                           ; Regs used in _tryAgain: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   687                           
   688                           
   689                           ;main.c: 257:     lcd_init();
   690  05C2  120A  118A  24BB  120A  118A  	fcall	_lcd_init
   691                           
   692                           ;main.c: 258:     lcd_instruction(0x80);
   693  05C7  3080               	movlw	128
   694  05C8  120A  118A  24A7  120A  118A  	fcall	_lcd_instruction
   695  05CD                     l1187:
   696                           
   697                           ;main.c: 259:     lcd_string("   TRY AGAIN", 12);
   698  05CD  300C               	movlw	12
   699  05CE  00F3               	movwf	lcd_string@size
   700  05CF  3000               	movlw	0
   701  05D0  00F4               	movwf	lcd_string@size+1
   702  05D1  3011               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   703  05D2  120A  118A  24D4  120A  118A  	fcall	_lcd_string
   704  05D7                     l1189:
   705                           
   706                           ;main.c: 261:     _delay((unsigned long)((10000)*(4000000/4000.0)));
   707  05D7  3033               	movlw	51
   708  05D8  00FA               	movwf	??_tryAgain+2
   709  05D9  30BB               	movlw	187
   710  05DA  00F9               	movwf	??_tryAgain+1
   711  05DB  30DF               	movlw	223
   712  05DC  00F8               	movwf	??_tryAgain
   713  05DD                     u667:
   714  05DD  0BF8               	decfsz	??_tryAgain,f
   715  05DE  2DDD               	goto	u667
   716  05DF  0BF9               	decfsz	??_tryAgain+1,f
   717  05E0  2DDD               	goto	u667
   718  05E1  0BFA               	decfsz	??_tryAgain+2,f
   719  05E2  2DDD               	goto	u667
   720  05E3  2DE4               	nop2
   721  05E4                     l1191:
   722                           
   723                           ;main.c: 263:     lcd_init();
   724  05E4  120A  118A  24BB  120A  118A  	fcall	_lcd_init
   725  05E9                     l1193:
   726                           
   727                           ;main.c: 264:     lcd_instruction(0x80);
   728  05E9  3080               	movlw	128
   729  05EA  120A  118A  24A7  120A  118A  	fcall	_lcd_instruction
   730  05EF                     l1195:
   731                           
   732                           ;main.c: 265:     lcd_string(" Enter Password", 15);
   733  05EF  300F               	movlw	15
   734  05F0  00F3               	movwf	lcd_string@size
   735  05F1  3000               	movlw	0
   736  05F2  00F4               	movwf	lcd_string@size+1
   737  05F3  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   738  05F4  120A  118A  24D4  120A  118A  	fcall	_lcd_string
   739  05F9                     l1197:
   740                           
   741                           ;main.c: 267:     lcd_instruction(0xC0);
   742  05F9  30C0               	movlw	192
   743  05FA  120A  118A  24A7  120A  118A  	fcall	_lcd_instruction
   744  05FF                     l1199:
   745                           
   746                           ;main.c: 268:     lcd_string("     ", 5);
   747  05FF  3005               	movlw	5
   748  0600  00F3               	movwf	lcd_string@size
   749  0601  3000               	movlw	0
   750  0602  00F4               	movwf	lcd_string@size+1
   751  0603  3036               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   752  0604  120A  118A  24D4  120A  118A  	fcall	_lcd_string
   753  0609                     l159:
   754  0609  0008               	return
   755  060A                     __end_of_tryAgain:
   756                           
   757                           	psect	text2
   758  051A                     __ptext2:	
   759 ;; *************** function _resetLock *****************
   760 ;; Defined at:
   761 ;;		line 229 in file "main.c"
   762 ;; Parameters:    Size  Location     Type
   763 ;;		None
   764 ;; Auto vars:     Size  Location     Type
   765 ;;  i               2   12[COMMON] int 
   766 ;; Return value:  Size  Location     Type
   767 ;;                  1    wreg      void 
   768 ;; Registers used:
   769 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   770 ;; Tracked objects:
   771 ;;		On entry : 0/0
   772 ;;		On exit  : 0/0
   773 ;;		Unchanged: 0/0
   774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   775 ;;      Params:         0       0       0       0       0
   776 ;;      Locals:         2       0       0       0       0
   777 ;;      Temps:          1       0       0       0       0
   778 ;;      Totals:         3       0       0       0       0
   779 ;;Total ram usage:        3 bytes
   780 ;; Hardware stack levels used: 1
   781 ;; Hardware stack levels required when called: 3
   782 ;; This function calls:
   783 ;;		_lock_init
   784 ;; This function is called by:
   785 ;;		_main
   786 ;; This function uses a non-reentrant model
   787 ;;
   788                           
   789  051A                     _resetLock:	
   790                           ;psect for function _resetLock
   791                           
   792  051A                     l1065:	
   793                           ;incstack = 0
   794                           ; Regs used in _resetLock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   795                           
   796                           
   797                           ;main.c: 231:     passwordLength = 0;
   798  051A  1283               	bcf	3,5	;RP0=0, select bank0
   799  051B  1303               	bcf	3,6	;RP1=0, select bank0
   800  051C  01AC               	clrf	_passwordLength
   801  051D  01AD               	clrf	_passwordLength+1
   802  051E                     l1067:
   803                           
   804                           ;main.c: 232:     lock_init();
   805  051E  120A  118A  257A  120A  118A  	fcall	_lock_init
   806  0523                     l1069:
   807                           
   808                           ;main.c: 233:     for(int i=0; i<passwordMaxLength; i++)
   809  0523  01FC               	clrf	resetLock@i
   810  0524  01FD               	clrf	resetLock@i+1
   811  0525  2D34               	goto	l1075
   812  0526                     l1071:
   813                           
   814                           ;main.c: 234:     {;main.c: 235:         currentPassword[i] = '0';
   815  0526  3030               	movlw	48
   816  0527  00FB               	movwf	??_resetLock
   817  0528  087C               	movf	resetLock@i,w
   818  0529  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
   819  052A  0084               	movwf	4
   820  052B  087B               	movf	??_resetLock,w
   821  052C  1383               	bcf	3,7	;select IRP bank0
   822  052D  0080               	movwf	0
   823  052E                     l1073:
   824                           
   825                           ;main.c: 236:     }
   826  052E  3001               	movlw	1
   827  052F  07FC               	addwf	resetLock@i,f
   828  0530  1803               	skipnc
   829  0531  0AFD               	incf	resetLock@i+1,f
   830  0532  3000               	movlw	0
   831  0533  07FD               	addwf	resetLock@i+1,f
   832  0534                     l1075:
   833  0534  087D               	movf	resetLock@i+1,w
   834  0535  3A80               	xorlw	128
   835  0536  00FB               	movwf	??_resetLock
   836  0537  1283               	bcf	3,5	;RP0=0, select bank0
   837  0538  1303               	bcf	3,6	;RP1=0, select bank0
   838  0539  082B               	movf	_passwordMaxLength+1,w
   839  053A  3A80               	xorlw	128
   840  053B  027B               	subwf	??_resetLock,w
   841  053C  1D03               	skipz
   842  053D  2D40               	goto	u385
   843  053E  082A               	movf	_passwordMaxLength,w
   844  053F  027C               	subwf	resetLock@i,w
   845  0540                     u385:
   846  0540  1C03               	skipc
   847  0541  2D43               	goto	u381
   848  0542  2D44               	goto	u380
   849  0543                     u381:
   850  0543  2D26               	goto	l1071
   851  0544                     u380:
   852  0544                     l153:
   853  0544  0008               	return
   854  0545                     __end_of_resetLock:
   855                           
   856                           	psect	text3
   857  057A                     __ptext3:	
   858 ;; *************** function _lock_init *****************
   859 ;; Defined at:
   860 ;;		line 239 in file "main.c"
   861 ;; Parameters:    Size  Location     Type
   862 ;;		None
   863 ;; Auto vars:     Size  Location     Type
   864 ;;		None
   865 ;; Return value:  Size  Location     Type
   866 ;;                  1    wreg      void 
   867 ;; Registers used:
   868 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   869 ;; Tracked objects:
   870 ;;		On entry : 0/0
   871 ;;		On exit  : 0/0
   872 ;;		Unchanged: 0/0
   873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   874 ;;      Params:         0       0       0       0       0
   875 ;;      Locals:         0       0       0       0       0
   876 ;;      Temps:          3       0       0       0       0
   877 ;;      Totals:         3       0       0       0       0
   878 ;;Total ram usage:        3 bytes
   879 ;; Hardware stack levels used: 1
   880 ;; Hardware stack levels required when called: 2
   881 ;; This function calls:
   882 ;;		_lcd_init
   883 ;;		_lcd_instruction
   884 ;;		_lcd_string
   885 ;; This function is called by:
   886 ;;		_main
   887 ;;		_resetLock
   888 ;; This function uses a non-reentrant model
   889 ;;
   890                           
   891  057A                     _lock_init:	
   892                           ;psect for function _lock_init
   893                           
   894  057A                     l1019:	
   895                           ;incstack = 0
   896                           ; Regs used in _lock_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   897                           
   898                           
   899                           ;main.c: 241:     lcd_init();
   900  057A  120A  118A  24BB  120A  118A  	fcall	_lcd_init
   901                           
   902                           ;main.c: 242:     lcd_instruction(0x80);
   903  057F  3080               	movlw	128
   904  0580  120A  118A  24A7  120A  118A  	fcall	_lcd_instruction
   905  0585                     l1021:
   906                           
   907                           ;main.c: 243:     lcd_string("    Welcome", 11);
   908  0585  300B               	movlw	11
   909  0586  00F3               	movwf	lcd_string@size
   910  0587  3000               	movlw	0
   911  0588  00F4               	movwf	lcd_string@size+1
   912  0589  302A               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   913  058A  120A  118A  24D4  120A  118A  	fcall	_lcd_string
   914  058F                     l1023:
   915                           
   916                           ;main.c: 245:     _delay((unsigned long)((10000)*(4000000/4000.0)));
   917  058F  3033               	movlw	51
   918  0590  00FA               	movwf	??_lock_init+2
   919  0591  30BB               	movlw	187
   920  0592  00F9               	movwf	??_lock_init+1
   921  0593  30DF               	movlw	223
   922  0594  00F8               	movwf	??_lock_init
   923  0595                     u677:
   924  0595  0BF8               	decfsz	??_lock_init,f
   925  0596  2D95               	goto	u677
   926  0597  0BF9               	decfsz	??_lock_init+1,f
   927  0598  2D95               	goto	u677
   928  0599  0BFA               	decfsz	??_lock_init+2,f
   929  059A  2D95               	goto	u677
   930  059B  2D9C               	nop2
   931  059C                     l1025:
   932                           
   933                           ;main.c: 247:     lcd_init();
   934  059C  120A  118A  24BB  120A  118A  	fcall	_lcd_init
   935  05A1                     l1027:
   936                           
   937                           ;main.c: 248:     lcd_instruction(0x80);
   938  05A1  3080               	movlw	128
   939  05A2  120A  118A  24A7  120A  118A  	fcall	_lcd_instruction
   940  05A7                     l1029:
   941                           
   942                           ;main.c: 249:     lcd_string(" Enter Password", 15);
   943  05A7  300F               	movlw	15
   944  05A8  00F3               	movwf	lcd_string@size
   945  05A9  3000               	movlw	0
   946  05AA  00F4               	movwf	lcd_string@size+1
   947  05AB  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   948  05AC  120A  118A  24D4  120A  118A  	fcall	_lcd_string
   949  05B1                     l1031:
   950                           
   951                           ;main.c: 251:     lcd_instruction(0xC0);
   952  05B1  30C0               	movlw	192
   953  05B2  120A  118A  24A7  120A  118A  	fcall	_lcd_instruction
   954  05B7                     l1033:
   955                           
   956                           ;main.c: 252:     lcd_string("     ", 5);
   957  05B7  3005               	movlw	5
   958  05B8  00F3               	movwf	lcd_string@size
   959  05B9  3000               	movlw	0
   960  05BA  00F4               	movwf	lcd_string@size+1
   961  05BB  3036               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   962  05BC  120A  118A  24D4  120A  118A  	fcall	_lcd_string
   963  05C1                     l156:
   964  05C1  0008               	return
   965  05C2                     __end_of_lock_init:
   966                           
   967                           	psect	text4
   968  04D4                     __ptext4:	
   969 ;; *************** function _lcd_string *****************
   970 ;; Defined at:
   971 ;;		line 104 in file "main.c"
   972 ;; Parameters:    Size  Location     Type
   973 ;;  string          1    wreg     PTR unsigned char 
   974 ;;		 -> STR_7(6), STR_6(16), STR_5(13), STR_4(6), 
   975 ;;		 -> STR_3(16), STR_2(12), STR_1(12), 
   976 ;;  size            2    3[COMMON] unsigned int 
   977 ;; Auto vars:     Size  Location     Type
   978 ;;  string          1    7[COMMON] PTR unsigned char 
   979 ;;		 -> STR_7(6), STR_6(16), STR_5(13), STR_4(6), 
   980 ;;		 -> STR_3(16), STR_2(12), STR_1(12), 
   981 ;;  i               2    5[COMMON] unsigned int 
   982 ;; Return value:  Size  Location     Type
   983 ;;                  1    wreg      void 
   984 ;; Registers used:
   985 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   986 ;; Tracked objects:
   987 ;;		On entry : 0/0
   988 ;;		On exit  : 0/0
   989 ;;		Unchanged: 0/0
   990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   991 ;;      Params:         2       0       0       0       0
   992 ;;      Locals:         3       0       0       0       0
   993 ;;      Temps:          0       0       0       0       0
   994 ;;      Totals:         5       0       0       0       0
   995 ;;Total ram usage:        5 bytes
   996 ;; Hardware stack levels used: 1
   997 ;; Hardware stack levels required when called: 1
   998 ;; This function calls:
   999 ;;		_lcd_data
  1000 ;; This function is called by:
  1001 ;;		_main
  1002 ;;		_lock_init
  1003 ;;		_tryAgain
  1004 ;; This function uses a non-reentrant model
  1005 ;;
  1006                           
  1007  04D4                     _lcd_string:	
  1008                           ;psect for function _lcd_string
  1009                           
  1010                           
  1011                           ;incstack = 0
  1012                           ; Regs used in _lcd_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1013                           ;lcd_string@string stored from wreg
  1014  04D4  00F7               	movwf	lcd_string@string
  1015  04D5                     l1011:
  1016                           
  1017                           ;main.c: 104: void lcd_string(unsigned char* string, unsigned int size);main.c: 105: {;m
      +                          ain.c: 106:     for(unsigned int i=0; i<size; i++)
  1018  04D5  01F5               	clrf	lcd_string@i
  1019  04D6  01F6               	clrf	lcd_string@i+1
  1020  04D7  2CEB               	goto	l1017
  1021  04D8                     l1013:
  1022                           
  1023                           ;main.c: 107:     {;main.c: 108:         lcd_data(string[i]);
  1024  04D8  0875               	movf	lcd_string@i,w
  1025  04D9  0777               	addwf	lcd_string@string,w
  1026  04DA  0084               	movwf	4
  1027  04DB  120A  118A  2003  120A  118A  	fcall	stringdir
  1028  04E0  120A  118A  2493  120A  118A  	fcall	_lcd_data
  1029  04E5                     l1015:
  1030                           
  1031                           ;main.c: 109:     }
  1032  04E5  3001               	movlw	1
  1033  04E6  07F5               	addwf	lcd_string@i,f
  1034  04E7  1803               	skipnc
  1035  04E8  0AF6               	incf	lcd_string@i+1,f
  1036  04E9  3000               	movlw	0
  1037  04EA  07F6               	addwf	lcd_string@i+1,f
  1038  04EB                     l1017:
  1039  04EB  0874               	movf	lcd_string@size+1,w
  1040  04EC  0276               	subwf	lcd_string@i+1,w
  1041  04ED  1D03               	skipz
  1042  04EE  2CF1               	goto	u335
  1043  04EF  0873               	movf	lcd_string@size,w
  1044  04F0  0275               	subwf	lcd_string@i,w
  1045  04F1                     u335:
  1046  04F1  1C03               	skipc
  1047  04F2  2CF4               	goto	u331
  1048  04F3  2CF5               	goto	u330
  1049  04F4                     u331:
  1050  04F4  2CD8               	goto	l1013
  1051  04F5                     u330:
  1052  04F5                     l82:
  1053  04F5  0008               	return
  1054  04F6                     __end_of_lcd_string:
  1055                           
  1056                           	psect	text5
  1057  04BB                     __ptext5:	
  1058 ;; *************** function _lcd_init *****************
  1059 ;; Defined at:
  1060 ;;		line 72 in file "main.c"
  1061 ;; Parameters:    Size  Location     Type
  1062 ;;		None
  1063 ;; Auto vars:     Size  Location     Type
  1064 ;;		None
  1065 ;; Return value:  Size  Location     Type
  1066 ;;                  1    wreg      void 
  1067 ;; Registers used:
  1068 ;;		wreg, status,2, status,0, pclath, cstack
  1069 ;; Tracked objects:
  1070 ;;		On entry : 0/0
  1071 ;;		On exit  : 0/0
  1072 ;;		Unchanged: 0/0
  1073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1074 ;;      Params:         0       0       0       0       0
  1075 ;;      Locals:         0       0       0       0       0
  1076 ;;      Temps:          0       0       0       0       0
  1077 ;;      Totals:         0       0       0       0       0
  1078 ;;Total ram usage:        0 bytes
  1079 ;; Hardware stack levels used: 1
  1080 ;; Hardware stack levels required when called: 1
  1081 ;; This function calls:
  1082 ;;		_lcd_instruction
  1083 ;; This function is called by:
  1084 ;;		_main
  1085 ;;		_lock_init
  1086 ;;		_tryAgain
  1087 ;; This function uses a non-reentrant model
  1088 ;;
  1089                           
  1090  04BB                     _lcd_init:	
  1091                           ;psect for function _lcd_init
  1092                           
  1093  04BB                     l1009:	
  1094                           ;incstack = 0
  1095                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  1096                           
  1097                           
  1098                           ;main.c: 74:     lcd_instruction(0x38);
  1099  04BB  3038               	movlw	56
  1100  04BC  120A  118A  24A7  120A  118A  	fcall	_lcd_instruction
  1101                           
  1102                           ;main.c: 75:     lcd_instruction(0x0C);
  1103  04C1  300C               	movlw	12
  1104  04C2  120A  118A  24A7  120A  118A  	fcall	_lcd_instruction
  1105                           
  1106                           ;main.c: 76:     lcd_instruction(0x06);
  1107  04C7  3006               	movlw	6
  1108  04C8  120A  118A  24A7  120A  118A  	fcall	_lcd_instruction
  1109                           
  1110                           ;main.c: 77:     lcd_instruction(0x01);
  1111  04CD  3001               	movlw	1
  1112  04CE  120A  118A  24A7  120A  118A  	fcall	_lcd_instruction
  1113  04D3                     l70:
  1114  04D3  0008               	return
  1115  04D4                     __end_of_lcd_init:
  1116                           
  1117                           	psect	text6
  1118  04A7                     __ptext6:	
  1119 ;; *************** function _lcd_instruction *****************
  1120 ;; Defined at:
  1121 ;;		line 80 in file "main.c"
  1122 ;; Parameters:    Size  Location     Type
  1123 ;;  data            1    wreg     unsigned char 
  1124 ;; Auto vars:     Size  Location     Type
  1125 ;;  data            1    2[COMMON] unsigned char 
  1126 ;; Return value:  Size  Location     Type
  1127 ;;                  1    wreg      void 
  1128 ;; Registers used:
  1129 ;;		wreg
  1130 ;; Tracked objects:
  1131 ;;		On entry : 0/0
  1132 ;;		On exit  : 0/0
  1133 ;;		Unchanged: 0/0
  1134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1135 ;;      Params:         0       0       0       0       0
  1136 ;;      Locals:         1       0       0       0       0
  1137 ;;      Temps:          2       0       0       0       0
  1138 ;;      Totals:         3       0       0       0       0
  1139 ;;Total ram usage:        3 bytes
  1140 ;; Hardware stack levels used: 1
  1141 ;; This function calls:
  1142 ;;		Nothing
  1143 ;; This function is called by:
  1144 ;;		_main
  1145 ;;		_lcd_init
  1146 ;;		_lock_init
  1147 ;;		_tryAgain
  1148 ;; This function uses a non-reentrant model
  1149 ;;
  1150                           
  1151  04A7                     _lcd_instruction:	
  1152                           ;psect for function _lcd_instruction
  1153                           
  1154                           
  1155                           ;incstack = 0
  1156                           ; Regs used in _lcd_instruction: [wreg]
  1157                           ;lcd_instruction@data stored from wreg
  1158  04A7  00F2               	movwf	lcd_instruction@data
  1159  04A8                     l989:
  1160                           
  1161                           ;main.c: 80: void lcd_instruction(unsigned char data);main.c: 81: {;main.c: 82:     PORT
      +                          D = data;
  1162  04A8  0872               	movf	lcd_instruction@data,w
  1163  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  1164  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  1165  04AB  0088               	movwf	8	;volatile
  1166  04AC                     l991:
  1167                           
  1168                           ;main.c: 83:     RC0 = 0;
  1169  04AC  1007               	bcf	7,0	;volatile
  1170  04AD                     l993:
  1171                           
  1172                           ;main.c: 84:     RC1 = 0;
  1173  04AD  1087               	bcf	7,1	;volatile
  1174  04AE                     l995:
  1175                           
  1176                           ;main.c: 85:     RC2 = 1;
  1177  04AE  1507               	bsf	7,2	;volatile
  1178                           
  1179                           ;main.c: 87:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1180  04AF  3007               	movlw	7
  1181  04B0  00F1               	movwf	??_lcd_instruction+1
  1182  04B1  307D               	movlw	125
  1183  04B2  00F0               	movwf	??_lcd_instruction
  1184  04B3                     u687:
  1185  04B3  0BF0               	decfsz	??_lcd_instruction,f
  1186  04B4  2CB3               	goto	u687
  1187  04B5  0BF1               	decfsz	??_lcd_instruction+1,f
  1188  04B6  2CB3               	goto	u687
  1189  04B7                     l997:
  1190                           
  1191                           ;main.c: 89:     RC2 = 0;
  1192  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  1193  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  1194  04B9  1107               	bcf	7,2	;volatile
  1195  04BA                     l73:
  1196  04BA  0008               	return
  1197  04BB                     __end_of_lcd_instruction:
  1198                           
  1199                           	psect	text7
  1200  0676                     __ptext7:	
  1201 ;; *************** function _keypad *****************
  1202 ;; Defined at:
  1203 ;;		line 112 in file "main.c"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;		None
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;		None
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      void 
  1210 ;; Registers used:
  1211 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1217 ;;      Params:         0       0       0       0       0
  1218 ;;      Locals:         0       0       0       0       0
  1219 ;;      Temps:          1       0       0       0       0
  1220 ;;      Totals:         1       0       0       0       0
  1221 ;;Total ram usage:        1 bytes
  1222 ;; Hardware stack levels used: 1
  1223 ;; Hardware stack levels required when called: 1
  1224 ;; This function calls:
  1225 ;;		_lcd_data
  1226 ;; This function is called by:
  1227 ;;		_main
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231  0676                     _keypad:	
  1232                           ;psect for function _keypad
  1233                           
  1234  0676                     l1077:	
  1235                           ;incstack = 0
  1236                           ; Regs used in _keypad: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1237                           
  1238                           
  1239                           ;main.c: 114:     RB0 = 1; RB1 = 0; RB2 = 0;
  1240  0676  1283               	bcf	3,5	;RP0=0, select bank0
  1241  0677  1303               	bcf	3,6	;RP1=0, select bank0
  1242  0678  1406               	bsf	6,0	;volatile
  1243  0679  1086               	bcf	6,1	;volatile
  1244  067A  1106               	bcf	6,2	;volatile
  1245                           
  1246                           ;main.c: 116:     if(RB4 == 1)
  1247  067B  1E06               	btfss	6,4	;volatile
  1248  067C  2E7E               	goto	u391
  1249  067D  2E7F               	goto	u390
  1250  067E                     u391:
  1251  067E  2E99               	goto	l1085
  1252  067F                     u390:
  1253  067F                     l1079:
  1254                           
  1255                           ;main.c: 117:     {;main.c: 118:         lcd_data('1');
  1256  067F  3031               	movlw	49
  1257  0680  120A  118A  2493  120A  118A  	fcall	_lcd_data
  1258  0685                     l86:	
  1259                           ;main.c: 119:         while(RB4 == 1);
  1260                           
  1261  0685  1283               	bcf	3,5	;RP0=0, select bank0
  1262  0686  1303               	bcf	3,6	;RP1=0, select bank0
  1263  0687  1A06               	btfsc	6,4	;volatile
  1264  0688  2E8A               	goto	u401
  1265  0689  2E8B               	goto	u400
  1266  068A                     u401:
  1267  068A  2E85               	goto	l86
  1268  068B                     u400:
  1269  068B                     l1081:
  1270                           
  1271                           ;main.c: 120:         currentPassword[passwordLength] = '1';
  1272  068B  3031               	movlw	49
  1273  068C  00F3               	movwf	??_keypad
  1274  068D  082C               	movf	_passwordLength,w
  1275  068E  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1276  068F  0084               	movwf	4
  1277  0690  0873               	movf	??_keypad,w
  1278  0691  1383               	bcf	3,7	;select IRP bank0
  1279  0692  0080               	movwf	0
  1280  0693                     l1083:
  1281                           
  1282                           ;main.c: 121:         passwordLength++;
  1283  0693  3001               	movlw	1
  1284  0694  07AC               	addwf	_passwordLength,f
  1285  0695  1803               	skipnc
  1286  0696  0AAD               	incf	_passwordLength+1,f
  1287  0697  3000               	movlw	0
  1288  0698  07AD               	addwf	_passwordLength+1,f
  1289  0699                     l1085:
  1290                           
  1291                           ;main.c: 123:     if(RB5 == 1)
  1292  0699  1E86               	btfss	6,5	;volatile
  1293  069A  2E9C               	goto	u411
  1294  069B  2E9D               	goto	u410
  1295  069C                     u411:
  1296  069C  2EB7               	goto	l1093
  1297  069D                     u410:
  1298  069D                     l1087:
  1299                           
  1300                           ;main.c: 124:     {;main.c: 125:         lcd_data('4');
  1301  069D  3034               	movlw	52
  1302  069E  120A  118A  2493  120A  118A  	fcall	_lcd_data
  1303  06A3                     l90:	
  1304                           ;main.c: 126:         while(RB5 == 1);
  1305                           
  1306  06A3  1283               	bcf	3,5	;RP0=0, select bank0
  1307  06A4  1303               	bcf	3,6	;RP1=0, select bank0
  1308  06A5  1A86               	btfsc	6,5	;volatile
  1309  06A6  2EA8               	goto	u421
  1310  06A7  2EA9               	goto	u420
  1311  06A8                     u421:
  1312  06A8  2EA3               	goto	l90
  1313  06A9                     u420:
  1314  06A9                     l1089:
  1315                           
  1316                           ;main.c: 127:         currentPassword[passwordLength] = '4';
  1317  06A9  3034               	movlw	52
  1318  06AA  00F3               	movwf	??_keypad
  1319  06AB  082C               	movf	_passwordLength,w
  1320  06AC  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1321  06AD  0084               	movwf	4
  1322  06AE  0873               	movf	??_keypad,w
  1323  06AF  1383               	bcf	3,7	;select IRP bank0
  1324  06B0  0080               	movwf	0
  1325  06B1                     l1091:
  1326                           
  1327                           ;main.c: 128:         passwordLength++;
  1328  06B1  3001               	movlw	1
  1329  06B2  07AC               	addwf	_passwordLength,f
  1330  06B3  1803               	skipnc
  1331  06B4  0AAD               	incf	_passwordLength+1,f
  1332  06B5  3000               	movlw	0
  1333  06B6  07AD               	addwf	_passwordLength+1,f
  1334  06B7                     l1093:
  1335                           
  1336                           ;main.c: 130:     if(RB6 == 1)
  1337  06B7  1F06               	btfss	6,6	;volatile
  1338  06B8  2EBA               	goto	u431
  1339  06B9  2EBB               	goto	u430
  1340  06BA                     u431:
  1341  06BA  2ED5               	goto	l1101
  1342  06BB                     u430:
  1343  06BB                     l1095:
  1344                           
  1345                           ;main.c: 131:     {;main.c: 132:         lcd_data('7');
  1346  06BB  3037               	movlw	55
  1347  06BC  120A  118A  2493  120A  118A  	fcall	_lcd_data
  1348  06C1                     l94:	
  1349                           ;main.c: 133:         while(RB6 == 1);
  1350                           
  1351  06C1  1283               	bcf	3,5	;RP0=0, select bank0
  1352  06C2  1303               	bcf	3,6	;RP1=0, select bank0
  1353  06C3  1B06               	btfsc	6,6	;volatile
  1354  06C4  2EC6               	goto	u441
  1355  06C5  2EC7               	goto	u440
  1356  06C6                     u441:
  1357  06C6  2EC1               	goto	l94
  1358  06C7                     u440:
  1359  06C7                     l1097:
  1360                           
  1361                           ;main.c: 134:         currentPassword[passwordLength] = '7';
  1362  06C7  3037               	movlw	55
  1363  06C8  00F3               	movwf	??_keypad
  1364  06C9  082C               	movf	_passwordLength,w
  1365  06CA  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1366  06CB  0084               	movwf	4
  1367  06CC  0873               	movf	??_keypad,w
  1368  06CD  1383               	bcf	3,7	;select IRP bank0
  1369  06CE  0080               	movwf	0
  1370  06CF                     l1099:
  1371                           
  1372                           ;main.c: 135:         passwordLength++;
  1373  06CF  3001               	movlw	1
  1374  06D0  07AC               	addwf	_passwordLength,f
  1375  06D1  1803               	skipnc
  1376  06D2  0AAD               	incf	_passwordLength+1,f
  1377  06D3  3000               	movlw	0
  1378  06D4  07AD               	addwf	_passwordLength+1,f
  1379  06D5                     l1101:
  1380                           
  1381                           ;main.c: 137:     if(RB7 == 1)
  1382  06D5  1F86               	btfss	6,7	;volatile
  1383  06D6  2ED8               	goto	u451
  1384  06D7  2ED9               	goto	u450
  1385  06D8                     u451:
  1386  06D8  2EF3               	goto	l1109
  1387  06D9                     u450:
  1388  06D9                     l1103:
  1389                           
  1390                           ;main.c: 138:     {;main.c: 139:         lcd_data('*');
  1391  06D9  302A               	movlw	42
  1392  06DA  120A  118A  2493  120A  118A  	fcall	_lcd_data
  1393  06DF                     l98:	
  1394                           ;main.c: 140:         while(RB7 == 1);
  1395                           
  1396  06DF  1283               	bcf	3,5	;RP0=0, select bank0
  1397  06E0  1303               	bcf	3,6	;RP1=0, select bank0
  1398  06E1  1B86               	btfsc	6,7	;volatile
  1399  06E2  2EE4               	goto	u461
  1400  06E3  2EE5               	goto	u460
  1401  06E4                     u461:
  1402  06E4  2EDF               	goto	l98
  1403  06E5                     u460:
  1404  06E5                     l1105:
  1405                           
  1406                           ;main.c: 141:         currentPassword[passwordLength] = '*';
  1407  06E5  302A               	movlw	42
  1408  06E6  00F3               	movwf	??_keypad
  1409  06E7  082C               	movf	_passwordLength,w
  1410  06E8  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1411  06E9  0084               	movwf	4
  1412  06EA  0873               	movf	??_keypad,w
  1413  06EB  1383               	bcf	3,7	;select IRP bank0
  1414  06EC  0080               	movwf	0
  1415  06ED                     l1107:
  1416                           
  1417                           ;main.c: 142:         passwordLength++;
  1418  06ED  3001               	movlw	1
  1419  06EE  07AC               	addwf	_passwordLength,f
  1420  06EF  1803               	skipnc
  1421  06F0  0AAD               	incf	_passwordLength+1,f
  1422  06F1  3000               	movlw	0
  1423  06F2  07AD               	addwf	_passwordLength+1,f
  1424  06F3                     l1109:
  1425                           
  1426                           ;main.c: 145:     RB0 = 0; RB1 = 1; RB2 = 0;
  1427  06F3  1006               	bcf	6,0	;volatile
  1428  06F4                     l1111:
  1429  06F4  1486               	bsf	6,1	;volatile
  1430  06F5                     l1113:
  1431  06F5  1106               	bcf	6,2	;volatile
  1432  06F6                     l1115:
  1433                           
  1434                           ;main.c: 147:     if(RB4 == 1)
  1435  06F6  1E06               	btfss	6,4	;volatile
  1436  06F7  2EF9               	goto	u471
  1437  06F8  2EFA               	goto	u470
  1438  06F9                     u471:
  1439  06F9  2F14               	goto	l1123
  1440  06FA                     u470:
  1441  06FA                     l1117:
  1442                           
  1443                           ;main.c: 148:     {;main.c: 149:         lcd_data('2');
  1444  06FA  3032               	movlw	50
  1445  06FB  120A  118A  2493  120A  118A  	fcall	_lcd_data
  1446  0700                     l102:	
  1447                           ;main.c: 150:         while(RB4 == 1);
  1448                           
  1449  0700  1283               	bcf	3,5	;RP0=0, select bank0
  1450  0701  1303               	bcf	3,6	;RP1=0, select bank0
  1451  0702  1A06               	btfsc	6,4	;volatile
  1452  0703  2F05               	goto	u481
  1453  0704  2F06               	goto	u480
  1454  0705                     u481:
  1455  0705  2F00               	goto	l102
  1456  0706                     u480:
  1457  0706                     l1119:
  1458                           
  1459                           ;main.c: 151:         currentPassword[passwordLength] = '2';
  1460  0706  3032               	movlw	50
  1461  0707  00F3               	movwf	??_keypad
  1462  0708  082C               	movf	_passwordLength,w
  1463  0709  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1464  070A  0084               	movwf	4
  1465  070B  0873               	movf	??_keypad,w
  1466  070C  1383               	bcf	3,7	;select IRP bank0
  1467  070D  0080               	movwf	0
  1468  070E                     l1121:
  1469                           
  1470                           ;main.c: 152:         passwordLength++;
  1471  070E  3001               	movlw	1
  1472  070F  07AC               	addwf	_passwordLength,f
  1473  0710  1803               	skipnc
  1474  0711  0AAD               	incf	_passwordLength+1,f
  1475  0712  3000               	movlw	0
  1476  0713  07AD               	addwf	_passwordLength+1,f
  1477  0714                     l1123:
  1478                           
  1479                           ;main.c: 154:     if(RB5 == 1)
  1480  0714  1E86               	btfss	6,5	;volatile
  1481  0715  2F17               	goto	u491
  1482  0716  2F18               	goto	u490
  1483  0717                     u491:
  1484  0717  2F32               	goto	l1131
  1485  0718                     u490:
  1486  0718                     l1125:
  1487                           
  1488                           ;main.c: 155:     {;main.c: 156:         lcd_data('5');
  1489  0718  3035               	movlw	53
  1490  0719  120A  118A  2493  120A  118A  	fcall	_lcd_data
  1491  071E                     l106:	
  1492                           ;main.c: 157:         while(RB5 == 1);
  1493                           
  1494  071E  1283               	bcf	3,5	;RP0=0, select bank0
  1495  071F  1303               	bcf	3,6	;RP1=0, select bank0
  1496  0720  1A86               	btfsc	6,5	;volatile
  1497  0721  2F23               	goto	u501
  1498  0722  2F24               	goto	u500
  1499  0723                     u501:
  1500  0723  2F1E               	goto	l106
  1501  0724                     u500:
  1502  0724                     l1127:
  1503                           
  1504                           ;main.c: 158:         currentPassword[passwordLength] = '5';
  1505  0724  3035               	movlw	53
  1506  0725  00F3               	movwf	??_keypad
  1507  0726  082C               	movf	_passwordLength,w
  1508  0727  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1509  0728  0084               	movwf	4
  1510  0729  0873               	movf	??_keypad,w
  1511  072A  1383               	bcf	3,7	;select IRP bank0
  1512  072B  0080               	movwf	0
  1513  072C                     l1129:
  1514                           
  1515                           ;main.c: 159:         passwordLength++;
  1516  072C  3001               	movlw	1
  1517  072D  07AC               	addwf	_passwordLength,f
  1518  072E  1803               	skipnc
  1519  072F  0AAD               	incf	_passwordLength+1,f
  1520  0730  3000               	movlw	0
  1521  0731  07AD               	addwf	_passwordLength+1,f
  1522  0732                     l1131:
  1523                           
  1524                           ;main.c: 161:     if(RB6 == 1)
  1525  0732  1F06               	btfss	6,6	;volatile
  1526  0733  2F35               	goto	u511
  1527  0734  2F36               	goto	u510
  1528  0735                     u511:
  1529  0735  2F50               	goto	l1139
  1530  0736                     u510:
  1531  0736                     l1133:
  1532                           
  1533                           ;main.c: 162:     {;main.c: 163:         lcd_data('8');
  1534  0736  3038               	movlw	56
  1535  0737  120A  118A  2493  120A  118A  	fcall	_lcd_data
  1536  073C                     l110:	
  1537                           ;main.c: 164:         while(RB6 == 1);
  1538                           
  1539  073C  1283               	bcf	3,5	;RP0=0, select bank0
  1540  073D  1303               	bcf	3,6	;RP1=0, select bank0
  1541  073E  1B06               	btfsc	6,6	;volatile
  1542  073F  2F41               	goto	u521
  1543  0740  2F42               	goto	u520
  1544  0741                     u521:
  1545  0741  2F3C               	goto	l110
  1546  0742                     u520:
  1547  0742                     l1135:
  1548                           
  1549                           ;main.c: 165:         currentPassword[passwordLength] = '8';
  1550  0742  3038               	movlw	56
  1551  0743  00F3               	movwf	??_keypad
  1552  0744  082C               	movf	_passwordLength,w
  1553  0745  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1554  0746  0084               	movwf	4
  1555  0747  0873               	movf	??_keypad,w
  1556  0748  1383               	bcf	3,7	;select IRP bank0
  1557  0749  0080               	movwf	0
  1558  074A                     l1137:
  1559                           
  1560                           ;main.c: 166:         passwordLength++;
  1561  074A  3001               	movlw	1
  1562  074B  07AC               	addwf	_passwordLength,f
  1563  074C  1803               	skipnc
  1564  074D  0AAD               	incf	_passwordLength+1,f
  1565  074E  3000               	movlw	0
  1566  074F  07AD               	addwf	_passwordLength+1,f
  1567  0750                     l1139:
  1568                           
  1569                           ;main.c: 168:     if(RB7 == 1)
  1570  0750  1F86               	btfss	6,7	;volatile
  1571  0751  2F53               	goto	u531
  1572  0752  2F54               	goto	u530
  1573  0753                     u531:
  1574  0753  2F6E               	goto	l1147
  1575  0754                     u530:
  1576  0754                     l1141:
  1577                           
  1578                           ;main.c: 169:     {;main.c: 170:         lcd_data('0');
  1579  0754  3030               	movlw	48
  1580  0755  120A  118A  2493  120A  118A  	fcall	_lcd_data
  1581  075A                     l114:	
  1582                           ;main.c: 171:         while(RB7 == 1);
  1583                           
  1584  075A  1283               	bcf	3,5	;RP0=0, select bank0
  1585  075B  1303               	bcf	3,6	;RP1=0, select bank0
  1586  075C  1B86               	btfsc	6,7	;volatile
  1587  075D  2F5F               	goto	u541
  1588  075E  2F60               	goto	u540
  1589  075F                     u541:
  1590  075F  2F5A               	goto	l114
  1591  0760                     u540:
  1592  0760                     l1143:
  1593                           
  1594                           ;main.c: 172:         currentPassword[passwordLength] = '0';
  1595  0760  3030               	movlw	48
  1596  0761  00F3               	movwf	??_keypad
  1597  0762  082C               	movf	_passwordLength,w
  1598  0763  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1599  0764  0084               	movwf	4
  1600  0765  0873               	movf	??_keypad,w
  1601  0766  1383               	bcf	3,7	;select IRP bank0
  1602  0767  0080               	movwf	0
  1603  0768                     l1145:
  1604                           
  1605                           ;main.c: 173:         passwordLength++;
  1606  0768  3001               	movlw	1
  1607  0769  07AC               	addwf	_passwordLength,f
  1608  076A  1803               	skipnc
  1609  076B  0AAD               	incf	_passwordLength+1,f
  1610  076C  3000               	movlw	0
  1611  076D  07AD               	addwf	_passwordLength+1,f
  1612  076E                     l1147:
  1613                           
  1614                           ;main.c: 176:     RB0 = 0; RB1 = 0; RB2 = 1;
  1615  076E  1006               	bcf	6,0	;volatile
  1616  076F                     l1149:
  1617  076F  1086               	bcf	6,1	;volatile
  1618  0770                     l1151:
  1619  0770  1506               	bsf	6,2	;volatile
  1620  0771                     l1153:
  1621                           
  1622                           ;main.c: 178:     if(RB4 == 1)
  1623  0771  1E06               	btfss	6,4	;volatile
  1624  0772  2F74               	goto	u551
  1625  0773  2F75               	goto	u550
  1626  0774                     u551:
  1627  0774  2F8F               	goto	l1161
  1628  0775                     u550:
  1629  0775                     l1155:
  1630                           
  1631                           ;main.c: 179:     {;main.c: 180:         lcd_data('3');
  1632  0775  3033               	movlw	51
  1633  0776  120A  118A  2493  120A  118A  	fcall	_lcd_data
  1634  077B                     l118:	
  1635                           ;main.c: 181:         while(RB4 == 1);
  1636                           
  1637  077B  1283               	bcf	3,5	;RP0=0, select bank0
  1638  077C  1303               	bcf	3,6	;RP1=0, select bank0
  1639  077D  1A06               	btfsc	6,4	;volatile
  1640  077E  2F80               	goto	u561
  1641  077F  2F81               	goto	u560
  1642  0780                     u561:
  1643  0780  2F7B               	goto	l118
  1644  0781                     u560:
  1645  0781                     l1157:
  1646                           
  1647                           ;main.c: 182:         currentPassword[passwordLength] = '3';
  1648  0781  3033               	movlw	51
  1649  0782  00F3               	movwf	??_keypad
  1650  0783  082C               	movf	_passwordLength,w
  1651  0784  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1652  0785  0084               	movwf	4
  1653  0786  0873               	movf	??_keypad,w
  1654  0787  1383               	bcf	3,7	;select IRP bank0
  1655  0788  0080               	movwf	0
  1656  0789                     l1159:
  1657                           
  1658                           ;main.c: 183:         passwordLength++;
  1659  0789  3001               	movlw	1
  1660  078A  07AC               	addwf	_passwordLength,f
  1661  078B  1803               	skipnc
  1662  078C  0AAD               	incf	_passwordLength+1,f
  1663  078D  3000               	movlw	0
  1664  078E  07AD               	addwf	_passwordLength+1,f
  1665  078F                     l1161:
  1666                           
  1667                           ;main.c: 185:     if(RB5 == 1)
  1668  078F  1E86               	btfss	6,5	;volatile
  1669  0790  2F92               	goto	u571
  1670  0791  2F93               	goto	u570
  1671  0792                     u571:
  1672  0792  2FAD               	goto	l1169
  1673  0793                     u570:
  1674  0793                     l1163:
  1675                           
  1676                           ;main.c: 186:     {;main.c: 187:         lcd_data('6');
  1677  0793  3036               	movlw	54
  1678  0794  120A  118A  2493  120A  118A  	fcall	_lcd_data
  1679  0799                     l122:	
  1680                           ;main.c: 188:         while(RB5 == 1);
  1681                           
  1682  0799  1283               	bcf	3,5	;RP0=0, select bank0
  1683  079A  1303               	bcf	3,6	;RP1=0, select bank0
  1684  079B  1A86               	btfsc	6,5	;volatile
  1685  079C  2F9E               	goto	u581
  1686  079D  2F9F               	goto	u580
  1687  079E                     u581:
  1688  079E  2F99               	goto	l122
  1689  079F                     u580:
  1690  079F                     l1165:
  1691                           
  1692                           ;main.c: 189:         currentPassword[passwordLength] = '6';
  1693  079F  3036               	movlw	54
  1694  07A0  00F3               	movwf	??_keypad
  1695  07A1  082C               	movf	_passwordLength,w
  1696  07A2  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1697  07A3  0084               	movwf	4
  1698  07A4  0873               	movf	??_keypad,w
  1699  07A5  1383               	bcf	3,7	;select IRP bank0
  1700  07A6  0080               	movwf	0
  1701  07A7                     l1167:
  1702                           
  1703                           ;main.c: 190:         passwordLength++;
  1704  07A7  3001               	movlw	1
  1705  07A8  07AC               	addwf	_passwordLength,f
  1706  07A9  1803               	skipnc
  1707  07AA  0AAD               	incf	_passwordLength+1,f
  1708  07AB  3000               	movlw	0
  1709  07AC  07AD               	addwf	_passwordLength+1,f
  1710  07AD                     l1169:
  1711                           
  1712                           ;main.c: 192:     if(RB6 == 1)
  1713  07AD  1F06               	btfss	6,6	;volatile
  1714  07AE  2FB0               	goto	u591
  1715  07AF  2FB1               	goto	u590
  1716  07B0                     u591:
  1717  07B0  2FCB               	goto	l1177
  1718  07B1                     u590:
  1719  07B1                     l1171:
  1720                           
  1721                           ;main.c: 193:     {;main.c: 194:         lcd_data('9');
  1722  07B1  3039               	movlw	57
  1723  07B2  120A  118A  2493  120A  118A  	fcall	_lcd_data
  1724  07B7                     l126:	
  1725                           ;main.c: 195:         while(RB6 == 1);
  1726                           
  1727  07B7  1283               	bcf	3,5	;RP0=0, select bank0
  1728  07B8  1303               	bcf	3,6	;RP1=0, select bank0
  1729  07B9  1B06               	btfsc	6,6	;volatile
  1730  07BA  2FBC               	goto	u601
  1731  07BB  2FBD               	goto	u600
  1732  07BC                     u601:
  1733  07BC  2FB7               	goto	l126
  1734  07BD                     u600:
  1735  07BD                     l1173:
  1736                           
  1737                           ;main.c: 196:         currentPassword[passwordLength] = '9';
  1738  07BD  3039               	movlw	57
  1739  07BE  00F3               	movwf	??_keypad
  1740  07BF  082C               	movf	_passwordLength,w
  1741  07C0  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1742  07C1  0084               	movwf	4
  1743  07C2  0873               	movf	??_keypad,w
  1744  07C3  1383               	bcf	3,7	;select IRP bank0
  1745  07C4  0080               	movwf	0
  1746  07C5                     l1175:
  1747                           
  1748                           ;main.c: 197:         passwordLength++;
  1749  07C5  3001               	movlw	1
  1750  07C6  07AC               	addwf	_passwordLength,f
  1751  07C7  1803               	skipnc
  1752  07C8  0AAD               	incf	_passwordLength+1,f
  1753  07C9  3000               	movlw	0
  1754  07CA  07AD               	addwf	_passwordLength+1,f
  1755  07CB                     l1177:
  1756                           
  1757                           ;main.c: 199:     if(RB7 == 1)
  1758  07CB  1F86               	btfss	6,7	;volatile
  1759  07CC  2FCE               	goto	u611
  1760  07CD  2FCF               	goto	u610
  1761  07CE                     u611:
  1762  07CE  2FE9               	goto	l133
  1763  07CF                     u610:
  1764  07CF                     l1179:
  1765                           
  1766                           ;main.c: 200:     {;main.c: 201:         lcd_data('#');
  1767  07CF  3023               	movlw	35
  1768  07D0  120A  118A  2493  120A  118A  	fcall	_lcd_data
  1769  07D5                     l130:	
  1770                           ;main.c: 202:         while(RB7 == 1);
  1771                           
  1772  07D5  1283               	bcf	3,5	;RP0=0, select bank0
  1773  07D6  1303               	bcf	3,6	;RP1=0, select bank0
  1774  07D7  1B86               	btfsc	6,7	;volatile
  1775  07D8  2FDA               	goto	u621
  1776  07D9  2FDB               	goto	u620
  1777  07DA                     u621:
  1778  07DA  2FD5               	goto	l130
  1779  07DB                     u620:
  1780  07DB                     l1181:
  1781                           
  1782                           ;main.c: 203:         currentPassword[passwordLength] = '#';
  1783  07DB  3023               	movlw	35
  1784  07DC  00F3               	movwf	??_keypad
  1785  07DD  082C               	movf	_passwordLength,w
  1786  07DE  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  1787  07DF  0084               	movwf	4
  1788  07E0  0873               	movf	??_keypad,w
  1789  07E1  1383               	bcf	3,7	;select IRP bank0
  1790  07E2  0080               	movwf	0
  1791  07E3                     l1183:
  1792                           
  1793                           ;main.c: 204:         passwordLength++;
  1794  07E3  3001               	movlw	1
  1795  07E4  07AC               	addwf	_passwordLength,f
  1796  07E5  1803               	skipnc
  1797  07E6  0AAD               	incf	_passwordLength+1,f
  1798  07E7  3000               	movlw	0
  1799  07E8  07AD               	addwf	_passwordLength+1,f
  1800  07E9                     l133:
  1801  07E9  0008               	return
  1802  07EA                     __end_of_keypad:
  1803                           
  1804                           	psect	text8
  1805  0493                     __ptext8:	
  1806 ;; *************** function _lcd_data *****************
  1807 ;; Defined at:
  1808 ;;		line 92 in file "main.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;  data            1    wreg     unsigned char 
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;  data            1    2[COMMON] unsigned char 
  1813 ;; Return value:  Size  Location     Type
  1814 ;;                  1    wreg      void 
  1815 ;; Registers used:
  1816 ;;		wreg
  1817 ;; Tracked objects:
  1818 ;;		On entry : 0/0
  1819 ;;		On exit  : 0/0
  1820 ;;		Unchanged: 0/0
  1821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1822 ;;      Params:         0       0       0       0       0
  1823 ;;      Locals:         1       0       0       0       0
  1824 ;;      Temps:          2       0       0       0       0
  1825 ;;      Totals:         3       0       0       0       0
  1826 ;;Total ram usage:        3 bytes
  1827 ;; Hardware stack levels used: 1
  1828 ;; This function calls:
  1829 ;;		Nothing
  1830 ;; This function is called by:
  1831 ;;		_lcd_string
  1832 ;;		_keypad
  1833 ;; This function uses a non-reentrant model
  1834 ;;
  1835                           
  1836  0493                     _lcd_data:	
  1837                           ;psect for function _lcd_data
  1838                           
  1839                           
  1840                           ;incstack = 0
  1841                           ; Regs used in _lcd_data: [wreg]
  1842                           ;lcd_data@data stored from wreg
  1843  0493  00F2               	movwf	lcd_data@data
  1844  0494                     l999:
  1845                           
  1846                           ;main.c: 92: void lcd_data(unsigned char data);main.c: 93: {;main.c: 94:     PORTD = dat
      +                          a;
  1847  0494  0872               	movf	lcd_data@data,w
  1848  0495  1283               	bcf	3,5	;RP0=0, select bank0
  1849  0496  1303               	bcf	3,6	;RP1=0, select bank0
  1850  0497  0088               	movwf	8	;volatile
  1851  0498                     l1001:
  1852                           
  1853                           ;main.c: 95:     RC0 = 1;
  1854  0498  1407               	bsf	7,0	;volatile
  1855  0499                     l1003:
  1856                           
  1857                           ;main.c: 96:     RC1 = 0;
  1858  0499  1087               	bcf	7,1	;volatile
  1859  049A                     l1005:
  1860                           
  1861                           ;main.c: 97:     RC2 = 1;
  1862  049A  1507               	bsf	7,2	;volatile
  1863                           
  1864                           ;main.c: 99:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1865  049B  3007               	movlw	7
  1866  049C  00F1               	movwf	??_lcd_data+1
  1867  049D  307D               	movlw	125
  1868  049E  00F0               	movwf	??_lcd_data
  1869  049F                     u697:
  1870  049F  0BF0               	decfsz	??_lcd_data,f
  1871  04A0  2C9F               	goto	u697
  1872  04A1  0BF1               	decfsz	??_lcd_data+1,f
  1873  04A2  2C9F               	goto	u697
  1874  04A3                     l1007:
  1875                           
  1876                           ;main.c: 101:     RC2 = 0;
  1877  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  1878  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  1879  04A5  1107               	bcf	7,2	;volatile
  1880  04A6                     l76:
  1881  04A6  0008               	return
  1882  04A7                     __end_of_lcd_data:
  1883                           
  1884                           	psect	text9
  1885  04F6                     __ptext9:	
  1886 ;; *************** function _getSize *****************
  1887 ;; Defined at:
  1888 ;;		line 208 in file "main.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;  string          1    wreg     PTR unsigned char 
  1891 ;;		 -> defaultPassword(5), 
  1892 ;; Auto vars:     Size  Location     Type
  1893 ;;  string          1    4[COMMON] PTR unsigned char 
  1894 ;;		 -> defaultPassword(5), 
  1895 ;;  i               2    5[COMMON] int 
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  2    0[COMMON] int 
  1898 ;; Registers used:
  1899 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1905 ;;      Params:         2       0       0       0       0
  1906 ;;      Locals:         3       0       0       0       0
  1907 ;;      Temps:          2       0       0       0       0
  1908 ;;      Totals:         7       0       0       0       0
  1909 ;;Total ram usage:        7 bytes
  1910 ;; Hardware stack levels used: 1
  1911 ;; This function calls:
  1912 ;;		Nothing
  1913 ;; This function is called by:
  1914 ;;		_main
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918  04F6                     _getSize:	
  1919                           ;psect for function _getSize
  1920                           
  1921                           
  1922                           ;incstack = 0
  1923                           ; Regs used in _getSize: [wreg-fsr0h+status,2+status,0]
  1924                           ;getSize@string stored from wreg
  1925  04F6  00F4               	movwf	getSize@string
  1926  04F7                     l1035:
  1927                           
  1928                           ;main.c: 208: int getSize(unsigned char* string);main.c: 209: {;main.c: 210:     int i=0
      +                          ;
  1929  04F7  01F5               	clrf	getSize@i
  1930  04F8  01F6               	clrf	getSize@i+1
  1931                           
  1932                           ;main.c: 211:     for(i=0; i<string[i]!='\0'; i++);
  1933  04F9  01F5               	clrf	getSize@i
  1934  04FA  01F6               	clrf	getSize@i+1
  1935  04FB  2D02               	goto	l1039
  1936  04FC                     l1037:
  1937  04FC  3001               	movlw	1
  1938  04FD  07F5               	addwf	getSize@i,f
  1939  04FE  1803               	skipnc
  1940  04FF  0AF6               	incf	getSize@i+1,f
  1941  0500  3000               	movlw	0
  1942  0501  07F6               	addwf	getSize@i+1,f
  1943  0502                     l1039:
  1944  0502  0875               	movf	getSize@i,w
  1945  0503  0774               	addwf	getSize@string,w
  1946  0504  00F2               	movwf	??_getSize
  1947  0505  0872               	movf	??_getSize,w
  1948  0506  0084               	movwf	4
  1949  0507  0876               	movf	getSize@i+1,w
  1950  0508  3A80               	xorlw	128
  1951  0509  00F3               	movwf	??_getSize+1
  1952  050A  3080               	movlw	128
  1953  050B  0273               	subwf	??_getSize+1,w
  1954  050C  1D03               	skipz
  1955  050D  2D11               	goto	u345
  1956  050E  1383               	bcf	3,7	;select IRP bank0
  1957  050F  0800               	movf	0,w
  1958  0510  0275               	subwf	getSize@i,w
  1959  0511                     u345:
  1960  0511  1C03               	skipc
  1961  0512  2D14               	goto	u341
  1962  0513  2D15               	goto	u340
  1963  0514                     u341:
  1964  0514  2CFC               	goto	l1037
  1965  0515                     u340:
  1966  0515                     l1041:
  1967                           
  1968                           ;main.c: 213:     return i;
  1969  0515  0876               	movf	getSize@i+1,w
  1970  0516  00F1               	movwf	?_getSize+1
  1971  0517  0875               	movf	getSize@i,w
  1972  0518  00F0               	movwf	?_getSize
  1973  0519                     l139:
  1974  0519  0008               	return
  1975  051A                     __end_of_getSize:
  1976                           
  1977                           	psect	text10
  1978  0545                     __ptext10:	
  1979 ;; *************** function _checkPass *****************
  1980 ;; Defined at:
  1981 ;;		line 216 in file "main.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;		None
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;  i               2    1[COMMON] int 
  1986 ;; Return value:  Size  Location     Type
  1987 ;;                  1    wreg      _Bool 
  1988 ;; Registers used:
  1989 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1990 ;; Tracked objects:
  1991 ;;		On entry : 0/0
  1992 ;;		On exit  : 0/0
  1993 ;;		Unchanged: 0/0
  1994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1995 ;;      Params:         0       0       0       0       0
  1996 ;;      Locals:         2       0       0       0       0
  1997 ;;      Temps:          1       0       0       0       0
  1998 ;;      Totals:         3       0       0       0       0
  1999 ;;Total ram usage:        3 bytes
  2000 ;; Hardware stack levels used: 1
  2001 ;; This function calls:
  2002 ;;		Nothing
  2003 ;; This function is called by:
  2004 ;;		_main
  2005 ;; This function uses a non-reentrant model
  2006 ;;
  2007                           
  2008  0545                     _checkPass:	
  2009                           ;psect for function _checkPass
  2010                           
  2011  0545                     l1045:	
  2012                           ;incstack = 0
  2013                           ; Regs used in _checkPass: [wreg-fsr0h+status,2+status,0]
  2014                           
  2015                           
  2016                           ;main.c: 218:     if(passwordLength == 0)
  2017  0545  1283               	bcf	3,5	;RP0=0, select bank0
  2018  0546  1303               	bcf	3,6	;RP1=0, select bank0
  2019  0547  082C               	movf	_passwordLength,w
  2020  0548  042D               	iorwf	_passwordLength+1,w
  2021  0549  1D03               	btfss	3,2
  2022  054A  2D4C               	goto	u351
  2023  054B  2D4D               	goto	u350
  2024  054C                     u351:
  2025  054C  2D4F               	goto	l1051
  2026  054D                     u350:
  2027  054D                     l1047:
  2028                           
  2029                           ;main.c: 219:         return 0;
  2030  054D  3000               	movlw	0
  2031  054E  2D79               	goto	l143
  2032  054F                     l1051:
  2033                           
  2034                           ;main.c: 221:     for(int i=0; i<passwordMaxLength; i++)
  2035  054F  01F1               	clrf	checkPass@i
  2036  0550  01F2               	clrf	checkPass@i+1
  2037  0551  2D68               	goto	l144
  2038  0552                     l1053:
  2039                           
  2040                           ;main.c: 222:     {;main.c: 223:         if(currentPassword[i] != defaultPassword[i])
  2041  0552  0871               	movf	checkPass@i,w
  2042  0553  3E25               	addlw	(low (_defaultPassword| 0))& (0+255)
  2043  0554  0084               	movwf	4
  2044  0555  1383               	bcf	3,7	;select IRP bank0
  2045  0556  0800               	movf	0,w
  2046  0557  00F0               	movwf	??_checkPass
  2047  0558  0871               	movf	checkPass@i,w
  2048  0559  3E20               	addlw	(low (_currentPassword| 0))& (0+255)
  2049  055A  0084               	movwf	4
  2050  055B  0800               	movf	0,w
  2051  055C  0670               	xorwf	??_checkPass,w
  2052  055D  1903               	skipnz
  2053  055E  2D60               	goto	u361
  2054  055F  2D61               	goto	u360
  2055  0560                     u361:
  2056  0560  2D62               	goto	l1059
  2057  0561                     u360:
  2058  0561  2D4D               	goto	l1047
  2059  0562                     l1059:
  2060                           
  2061                           ;main.c: 225:     }
  2062  0562  3001               	movlw	1
  2063  0563  07F1               	addwf	checkPass@i,f
  2064  0564  1803               	skipnc
  2065  0565  0AF2               	incf	checkPass@i+1,f
  2066  0566  3000               	movlw	0
  2067  0567  07F2               	addwf	checkPass@i+1,f
  2068  0568                     l144:
  2069  0568  0872               	movf	checkPass@i+1,w
  2070  0569  3A80               	xorlw	128
  2071  056A  00F0               	movwf	??_checkPass
  2072  056B  1283               	bcf	3,5	;RP0=0, select bank0
  2073  056C  1303               	bcf	3,6	;RP1=0, select bank0
  2074  056D  082B               	movf	_passwordMaxLength+1,w
  2075  056E  3A80               	xorlw	128
  2076  056F  0270               	subwf	??_checkPass,w
  2077  0570  1D03               	skipz
  2078  0571  2D74               	goto	u375
  2079  0572  082A               	movf	_passwordMaxLength,w
  2080  0573  0271               	subwf	checkPass@i,w
  2081  0574                     u375:
  2082  0574  1C03               	skipc
  2083  0575  2D77               	goto	u371
  2084  0576  2D78               	goto	u370
  2085  0577                     u371:
  2086  0577  2D52               	goto	l1053
  2087  0578                     u370:
  2088  0578                     l1061:
  2089                           
  2090                           ;main.c: 226:     return 1;
  2091  0578  3001               	movlw	1
  2092  0579                     l143:
  2093  0579  0008               	return
  2094  057A                     __end_of_checkPass:
  2095  007E                     btemp	set	126	;btemp
  2096  007E                     wtemp0	set	126
  2097                           
  2098                           	psect	idloc
  2099                           
  2100                           ;Config register IDLOC0 @ 0x2000
  2101                           ;	unspecified, using default values
  2102  2000                     	org	8192
  2103  2000  3FFF               	dw	16383
  2104                           
  2105                           ;Config register IDLOC1 @ 0x2001
  2106                           ;	unspecified, using default values
  2107  2001                     	org	8193
  2108  2001  3FFF               	dw	16383
  2109                           
  2110                           ;Config register IDLOC2 @ 0x2002
  2111                           ;	unspecified, using default values
  2112  2002                     	org	8194
  2113  2002  3FFF               	dw	16383
  2114                           
  2115                           ;Config register IDLOC3 @ 0x2003
  2116                           ;	unspecified, using default values
  2117  2003                     	org	8195
  2118  2003  3FFF               	dw	16383
  2119                           
  2120                           	psect	config
  2121                           
  2122                           ;Config register CONFIG @ 0x2007
  2123                           ;	Oscillator Selection bits
  2124                           ;	FOSC = 0x3, unprogrammed default
  2125                           ;	Watchdog Timer Enable bit
  2126                           ;	WDTE = OFF, WDT disabled
  2127                           ;	Power-up Timer Enable bit
  2128                           ;	PWRTE = 0x1, unprogrammed default
  2129                           ;	Brown-out Reset Enable bit
  2130                           ;	BOREN = 0x1, unprogrammed default
  2131                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2132                           ;	LVP = 0x1, unprogrammed default
  2133                           ;	Data EEPROM Memory Code Protection bit
  2134                           ;	CPD = 0x1, unprogrammed default
  2135                           ;	Flash Program Memory Write Enable bits
  2136                           ;	WRT = 0x3, unprogrammed default
  2137                           ;	In-Circuit Debugger Mode bit
  2138                           ;	DEBUG = 0x1, unprogrammed default
  2139                           ;	Flash Program Memory Code Protection bit
  2140                           ;	CP = 0x1, unprogrammed default
  2141  2007                     	org	8199
  2142  2007  3FFB               	dw	16379

Data Sizes:
    Strings     59
    Constant    0
    Data        10
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      3      17
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    getSize@string	PTR unsigned char  size(1) Largest target is 5
		 -> defaultPassword(BANK0[5]), 

    lcd_string@string	PTR unsigned char  size(1) Largest target is 16
		 -> STR_7(CODE[6]), STR_6(CODE[16]), STR_5(CODE[13]), STR_4(CODE[6]), 
		 -> STR_3(CODE[16]), STR_2(CODE[12]), STR_1(CODE[12]), 


Critical Paths under _main in COMMON

    _main->_resetLock
    _tryAgain->_lcd_string
    _resetLock->_lock_init
    _lock_init->_lcd_string
    _lcd_string->_lcd_data
    _lcd_init->_lcd_instruction
    _keypad->_lcd_data

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3936
                                              0 BANK0      3     3      0
                          _checkPass
                            _getSize
                             _keypad
                           _lcd_init
                    _lcd_instruction
                         _lcd_string
                          _lock_init
                          _resetLock
                           _tryAgain
 ---------------------------------------------------------------------------------
 (1) _tryAgain                                             3     3      0     919
                                              8 COMMON     3     3      0
                           _lcd_init
                    _lcd_instruction
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _resetLock                                            3     3      0     965
                                             11 COMMON     3     3      0
                          _lock_init
 ---------------------------------------------------------------------------------
 (2) _lock_init                                            3     3      0     919
                                              8 COMMON     3     3      0
                           _lcd_init
                    _lcd_instruction
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _lcd_string                                           5     3      2     875
                                              3 COMMON     5     3      2
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             0     0      0      22
                    _lcd_instruction
 ---------------------------------------------------------------------------------
 (2) _lcd_instruction                                      3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keypad                                               1     1      0      22
                                              3 COMMON     1     1      0
                           _lcd_data
 ---------------------------------------------------------------------------------
 (3) _lcd_data                                             3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _getSize                                              7     5      2     124
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 (1) _checkPass                                            3     3      0      68
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _checkPass
   _getSize
   _keypad
     _lcd_data
   _lcd_init
     _lcd_instruction
   _lcd_instruction
   _lcd_string
     _lcd_data
   _lock_init
     _lcd_init
     _lcd_instruction
     _lcd_string
   _resetLock
     _lock_init
   _tryAgain
     _lcd_init
     _lcd_instruction
     _lcd_string

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      3      11       5       21.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      1F      12        0.0%
ABS                  0      0      1F       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon Apr 24 23:36:02 2023

                      pc 0002             lcd_data@data 0072                       l70 04D3  
                     l73 04BA                       l90 06A3                       l82 04F5  
                     l76 04A6                       l94 06C1                       l86 0685  
                     l98 06DF                       fsr 0004                      l110 073C  
                    l102 0700                      l130 07D5                      l122 0799  
                    l114 075A                      l106 071E                      l133 07E9  
                    l126 07B7                      l118 077B                      l143 0579  
                    l144 0568                      l153 0544                      l139 0519  
                    l156 05C1                      l159 0609                      l991 04AC  
                    l993 04AD                      l995 04AE                      l997 04B7  
                    l989 04A8                      l999 0494                      _RB0 0030  
                    _RB1 0031                      _RC0 0038                      _RB2 0032  
                    _RC1 0039                      _RC2 003A                      _RB4 0034  
                    _RB5 0035                      _RB6 0036                      _RB7 0037  
                    u400 068B                      u401 068A                      u410 069D  
                    u330 04F5                      u411 069C                      u331 04F4  
                    u340 0515                      u500 0724                      u420 06A9  
                    u341 0514                      u501 0723                      u421 06A8  
                    u350 054D                      u510 0736                      u430 06BB  
                    u351 054C                      u511 0735                      u431 06BA  
                    u335 04F1                      u360 0561                      u600 07BD  
                    u520 0742                      u440 06C7                      u361 0560  
                    u345 0511                      u601 07BC                      u521 0741  
                    u441 06C6                      u370 0578                      u610 07CF  
                    u530 0754                      u450 06D9                      u371 0577  
                    u611 07CE                      u531 0753                      u451 06D8  
                    u620 07DB                      u540 0760                      u460 06E5  
                    u380 0544                      u621 07DA                      u541 075F  
                    u461 06E4                      u381 0543                      u550 0775  
                    u470 06FA                      u390 067F                      u630 062B  
                    u375 0574                      u551 0774                      u471 06F9  
                    u391 067E                      u631 062A                      u560 0781  
                    u480 0706                      u640 0669                      u561 0780  
                    u481 0705                      u385 0540                      u641 0668  
                    u570 0793                      u490 0718                      u571 0792  
                    u491 0717                      u580 079F                      u581 079E  
                    u645 0665                      u590 07B1                      u591 07B0  
                    u657 0648                      u667 05DD                      u677 0595  
                    u687 04B3                      u697 049F                      fsr0 0004  
                    indf 0000         ?_lcd_instruction 0070                     l1001 0498  
                   l1003 0499                     l1011 04D5                     l1005 049A  
                   l1101 06D5                     l1013 04D8                     l1021 0585  
                   l1007 04A3                     l1111 06F4                     l1103 06D9  
                   l1015 04E5                     l1031 05B1                     l1023 058F  
                   l1041 0515                     l1121 070E                     l1113 06F5  
                   l1105 06E5                     l1009 04BB                     l1017 04EB  
                   l1033 05B7                     l1025 059C                     l1201 060A  
                   l1051 054F                     l1035 04F7                     l1131 0732  
                   l1123 0714                     l1115 06F6                     l1107 06ED  
                   l1027 05A1                     l1019 057A                     l1211 062B  
                   l1203 060E                     l1061 0578                     l1053 0552  
                   l1045 0545                     l1037 04FC                     l1141 0754  
                   l1133 0736                     l1125 0718                     l1117 06FA  
                   l1109 06F3                     l1029 05A7                     l1221 0659  
                   l1213 0636                     l1205 0610                     l1047 054D  
                   l1039 0502                     l1151 0770                     l1143 0760  
                   l1135 0742                     l1127 0724                     l1119 0706  
                   l1071 0526                     l1223 0669                     l1215 0640  
                   l1207 0615                     l1161 078F                     l1153 0771  
                   l1145 0768                     l1137 074A                     l1129 072C  
                   l1081 068B                     l1073 052E                     l1065 051A  
                   l1225 066D                     l1217 064E                     l1209 0621  
                   l1059 0562                     l1171 07B1                     l1163 0793  
                   l1155 0775                     l1147 076E                     l1139 0750  
                   l1091 06B1                     l1083 0693                     l1075 0534  
                   l1067 051E                     l1219 0654                     l1181 07DB  
                   l1173 07BD                     l1165 079F                     l1157 0781  
                   l1149 076F                     l1093 06B7                     l1085 0699  
                   l1077 0676                     l1069 0523                     l1183 07E3  
                   l1175 07C5                     l1167 07A7                     l1159 0789  
                   l1095 06BB                     l1087 069D                     l1079 067F  
                   l1191 05E4                     l1177 07CB                     l1169 07AD  
                   l1097 06C7                     l1089 06A9                     l1193 05E9  
                   l1185 05C2                     l1179 07CF                     l1099 06CF  
                   l1195 05EF                     l1187 05CD                     l1197 05F9  
                   l1189 05D7                     l1199 05FF                     STR_1 0026  
                   STR_2 0032                     STR_3 0009                     STR_4 003E  
                   STR_5 0019                     STR_6 0009                     STR_7 003E  
                   _main 060A                     btemp 007E                     start 0000  
            lcd_string@i 0075                    ?_main 0070                    _PORTD 0008  
                  _TRISB 0086                    _TRISC 0087                    _TRISD 0088  
        __end_of_getSize 051A                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07EA             __end_of_main 0676  
                 ??_main 002E          _defaultPassword 0025         __end_of_lcd_data 04A7  
       __end_of_lcd_init 04D4                   _keypad 0676                ??_getSize 0072  
        _currentPassword 0020           _passwordLength 002C         __end_of_tryAgain 060A  
__end_of__initialization 07FC           __pcstackCOMMON 0070             __pidataBANK0 0476  
             __pbssBANK0 002A               __pmaintext 060A      lcd_instruction@data 0072  
                ?_keypad 0070                ?_lcd_data 0070               _lcd_string 04D4  
              ?_lcd_init 0070        __end_of_checkPass 057A               __stringtab 0003  
             checkPass@i 0071                ?_tryAgain 0070                  __ptext1 05C2  
                __ptext2 051A                  __ptext3 057A                  __ptext4 04D4  
                __ptext5 04BB                  __ptext6 04A7                  __ptext7 0676  
                __ptext8 0493                  __ptext9 04F6                  _getSize 04F6  
      __end_of_lock_init 05C2               ??_lcd_data 0070               ??_lcd_init 0073  
   end_of_initialization 07FC        __end_of_resetLock 0545               ??_tryAgain 0078  
         lcd_string@size 0073              ?_lcd_string 0073        ??_lcd_instruction 0070  
         __end_of_keypad 07EA      start_initialization 07EA               init_fetch0 0480  
            __pdataBANK0 0020                 ??_keypad 0073                ___latbits 0002  
          __pcstackBANK0 002E                _checkPass 0545                __pstrings 0003  
               ?_getSize 0070               resetLock@i 007C                _lock_init 057A  
             ?_checkPass 0070                _resetLock 051A              __stringbase 0008  
           ??_lcd_string 0075               ?_lock_init 0070          _lcd_instruction 04A7  
      _passwordMaxLength 002A               ?_resetLock 0070       __end_of_lcd_string 04F6  
     __end_of__stringtab 0009                 __ptext10 0545                 _lcd_data 0493  
               _lcd_init 04BB              ??_checkPass 0070                 getSize@i 0075  
               _tryAgain 05C2  __end_of_lcd_instruction 04BB                 init_ram0 0484  
            ??_lock_init 0078            getSize@string 0074                stringcode 0003  
            ??_resetLock 007B                 stringdir 0003                 stringtab 0003  
       lcd_string@string 0077  
